;;; config.el --- Configure emacs -*- lexical-binding:t -*-

;;; Commentary:

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programming source file located at
;; https://github.com/emilknievel/dotfiles/blob/main/emacs/.config/emacs/config.org
;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

;;; Code:

(unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
  (ido-mode t)
  (setopt ido-enable-flex-matching t))

(unless (memq window-system '(mac ns))
  (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR." t)

(require 'uniquify)
(setopt uniquify-buffer-name-style 'forward)

;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)

(setq apropos-do-all t
      ediff-window-setup-function 'ediff-setup-windows-plain)

(setopt save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        load-prefer-newer t
        backup-by-copying t
        frame-inhibit-implied-resize t
        custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Revert Dired and other buffers
(setopt global-auto-revert-non-file-buffers t)

;; Insert matching paren, bracket, etc. Surrounds active region with bracket.
(electric-pair-mode 1)

;; Single space after a period is considered "end of sentence".
(set-default 'sentence-end-double-space nil)

(unless backup-directory-alist
  (setopt backup-directory-alist `(("." . "/tmp/backups/"))))

(make-directory "/tmp/auto-saves/" t)

(setopt auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
        auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))

(add-hook 'kill-emacs-hook (lambda ()
                             (dolist (file (directory-files
                                            temporary-file-directory
                                            t
                                            "\\`auto-save-file-name-p\\'"))
                               (delete-file file))))

(setopt create-lockfiles nil)

(setopt calendar-week-start-day 1)

(use-package exec-path-from-shell
  :ensure t
  :custom (exec-path-from-shell-variables '("PATH"
                                            "WSL_DISTRO_NAME"
                                            "XDG_CONFIG_HOME"))
  :config (exec-path-from-shell-initialize)
  :when
  (or (memq window-system '(mac ns x pgtk)) (daemonp)))

(setenv "LANG" "en_US.UTF-8")

(use-package mise
  :ensure t
  :config
  (global-mise-mode))

(use-package gnutls
  :defer t
  :custom
  (gnutls-verify-error nil))

(defun my-alist-keys (alist)
  "Return a list of all keys in ALIST."
  (mapcar #'car alist))

(use-package which-key
  :demand t
  :ensure t
  :init
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  :custom
  (which-key-idle-delay 0.3))

(with-eval-after-load 'general
  (my-leader-keys
    ;; Top level functions
    "C-z" '(execute-extended-command :wk "M-x")

    ;; Prefixes

    "`" '(:ignore t :wk "Term")
    "a" '(:ignore t :wk "AI")
    "a c" '(:ignore t :wk "Copilot")
    "b" '(:ignore t :wk "Buffer")
    "c" '(:ignore t :wk "Code")
    "d" '(:ignore t :wk "Directory")
    "E" '(:ignore t :wk "Embark")
    "f" '(:ignore t :wk "File")
    "f c" '(:ignore t :wk "Config")
    "g" '(:ignore t :wk "Git")
    "h" '(:ignore t :wk "Help")
    "h d" '(:ignore t :wk "Devdocs")
    "n" '(:ignore t :wk "Notes")
    "o" '(:ignore t :wk "Org")
    "o b" '(:ignore t :wk "Babel")
    "p" '(:ignore t :wk "Project")
    "q" '(:ignore t :wk "Quit")
    "s" '(:ignore t :wk "Search")
    "t" '(:ignore t :wk "Toggle")
    "u" '(:ignore t :wk "UI")
    "u f" '(:ignore t :wk "Fonts")
    "u l" '(:ignore t :wk "Linum")
    "u m" '(:ignore t :wk "Mode Line")
    "w" '(:ignore t :wk "Windows")))

(defun my-reload-emacs-config ()
  "Tangle org file and reload the emacs config."
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (load-file (expand-file-name "config.el" user-emacs-directory)))

(defun my-edit-emacs-config ()
  "Edit Emacs literate config file."
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))

(with-eval-after-load 'general
  (my-leader-keys
    "f c r" '(my-reload-emacs-config :wk "Reload config")
    "f c f" '(my-edit-emacs-config :wk "Edit config")
    "f f" 'find-file
    "f l" 'load-file
    "f s" 'save-buffer))

(with-eval-after-load 'general
  (my-leader-keys
    ;; buffers
    "b" '(nil :wk "buffers")
    "b b" 'switch-to-buffer
    "b B" 'ibuffer
    "b c" 'consult-buffer
    "b X" 'scratch-buffer
    "q q" 'save-buffers-kill-terminal
    "b r" 'revert-buffer-quick))

(with-eval-after-load 'general
  (my-leader-keys
    ;; help
    "h f" 'describe-function
    "h v" 'describe-variable
    "h k" 'describe-key
    "h i" 'info
    "h b" 'describe-bindings
    "h a" 'describe-face))

(with-eval-after-load 'general
  (my-leader-keys
    ;; toggles
    "t v" '(visual-line-mode :wk "visual line mode")
    "t n" '(global-display-line-numbers-mode :wk "display line numbers")
    "t c" '(visual-fill-column-mode :wk "visual fill column mode")))

(with-eval-after-load 'general
  (my-leader-keys
    "u f v" 'variable-pitch-mode))

(with-eval-after-load 'general
  (my-leader-keys
    ;; emacsclient
    "q k" '(save-buffers-kill-emacs :wk "Kill emacsclient process")))

(use-package surround
  :ensure t
  :bind-keymap ("C-c s" . surround-keymap))

(use-package hydra
  :ensure t
  :config
  (defhydra hydra-window-actions (global-map "C-z w")
    "window actions"
    ("h" shrink-window-horizontally "shrink horizontally")
    ("l" enlarge-window-horizontally "enlarge horizontally")
    ("j" shrink-window "shrink window")
    ("k" enlarge-window "enlarge window")
    ("+" balance-windows "balance windows")
    ("-" shrink-window-if-larger-than-buffer "fit window")
    ("t" transpose-frame "transpose frame")))

(use-package iedit
  :ensure t
  ;; :after general
  :general
  (my-leader-keys "e" 'iedit-mode))

(require 'whitespace)

(use-package expand-region
  :ensure t
  :after general
  :general (my-leader-keys "=" 'er/expand-region))

(use-package vundo
  :ensure t
  :after general
  :general (my-leader-keys "c u" 'vundo))

(use-package multiple-cursors
  :ensure t
  :config
  (defhydra hydra-multiple-cursors (global-map "C-c")
    "multiple cursors"
    ("M-d" mc/mark-next-like-this "mark next")
    ("M-D" mc/unmark-previous-like-this "mark previous")))

(use-package delsel
  :ensure nil ; no need to install it as it is built-in
  :hook (after-init . delete-selection-mode))

(add-hook 'magit-diff-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'markdown-mode-hook 'visual-line-mode)

(add-hook 'org-agenda-mode-hook 'hl-line-mode)

(use-package eldoc
  :ensure nil
  :custom
  ;; Prevent long eldoc doc strings from resizing the echo area display.
  (eldoc-echo-area-use-multiline-p nil))

(setopt inhibit-startup-screen t)

(setopt confirm-kill-emacs 'y-or-n-p)

;; (pixel-scroll-precision-mode)

(use-package ultra-scroll
  :ensure (:host github :repo "jdtsmith/ultra-scroll")
  :init
  (setopt scroll-conservatively 3
          scroll-margin 0)
  :config
  (ultra-scroll-mode 1))

(when (eq system-type 'darwin)
  (use-package ns-auto-titlebar
    :ensure t
    :demand t
    :config (ns-auto-titlebar-mode))
  (setopt frame-resize-pixelwise t
          x-underline-at-descent-line t)
  (setq-default ns-use-proxy-icon nil
                ns-use-mwheel-momentum t
                ns-use-mwheel-acceleration t
                ns-use-thin-smoothing t
                ;; ns-antialias-text nil
                mac-command-modifier 'meta
                mac-right-command-modifier 'none
                mac-option-modifier 'super
                mac-control-modifier 'control))

(when (getenv "WSL_DISTRO_NAME")
  (defun copy-selected-text (start end)
    (interactive "r")
    (if (use-region-p)
        (let ((text (buffer-substring-no-properties start end)))
          (shell-command (concat "echo '" text "' | clip.exe"))))))

(setopt custom-theme-directory "~/.config/emacs/themes/")

(use-package modus-themes
  :ensure t
  :after general
  :init
  (setopt modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui nil
          modus-themes-bold-constructs nil
          modus-themes-italic-constructs nil
          modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)f
          modus-themes-common-palette-overrides '((fringe unspecified)
                                                  (bg-paren-match bg-magenta-intense)
                                                  (fg-heading-1 blue-warmer)
                                                  (fg-heading-2 yellow-cooler)
                                                  (fg-heading-3 cyan-cooler)
                                                  (bg-prose-block-delimiter bg-mode-line-inactive))
          ;; (border-mode-line-active unspecified)
          ;; (border-mode-line-inactive unspecified))
          modus-themes-headings '((0 . (1.5))
                                  (1 . (1.4))
                                  (2 . (1.3))
                                  (3 . (1.2))
                                  (4 . (1.1))
                                  (5 . (1.1))
                                  (6 . (1.0))
                                  (7 . (1.0))))
  :general (my-leader-keys
             "t t m" 'modus-themes-toggle))

(use-package ef-themes
  :ensure t
  :after general
  :init
  (setopt ef-themes-to-toggle '(ef-maris-light ef-duo-dark))
  :custom
  (ef-themes-mixed-fonts t)
  (ef-themes-variable-pitch-ui nil)
  (ef-themes-headings '((0 . (1.5))
                        (1 . (1.4))
                        (2 . (1.3))
                        (3 . (1.2))
                        (4 . (1.1))
                        (5 . (1.1))
                        (6 . (1.0))
                        (7 . (1.0))))
  :general (my-leader-keys
             "t t e" 'ef-themes-toggle))

(use-package standard-themes
  :ensure t
  :init
  (setopt standard-themes-mixed-fonts t
          standard-themes-variable-pitch-ui nil
          standard-themes-bold-constructs nil
          standard-themes-italic-constructs nil
          standard-themes-common-palette-overrides '((fringe unspecified))
          standard-themes-headings '((0 . (1.5))
                                     (1 . (1.4))
                                     (2 . (1.3))
                                     (3 . (1.2))
                                     (4 . (1.1))
                                     (5 . (1.1))
                                     (6 . (1.0))
                                     (7 . (1.0)))))

(use-package doric-themes :ensure t)

(defun my-toggle-rose-pine ()
  "Toggle between light and dark Rosé Pine themes."
  (interactive)
  (if (eq (nth 0 custom-enabled-themes) 'doom-rose-pine)
      (my-rose-pine-dawn)
    (my-rose-pine)))

(defun my-toggle-gruvbox ()
  "Toggle between light and dark Gruvbox themes."
  (interactive)
  (if (eq (nth 0 custom-enabled-themes) 'doom-gruvbox)
      (my-gruvbox-light)
    (my-gruvbox)))

(defun my-toggle-tomorrow ()
  "Toggle between light and dark Tomorrow themes."
  (interactive)
  (if (eq (nth 0 custom-enabled-themes) 'doom-tomorrow-night)
      (my-load-theme 'doom-tomorrow-day)
    (my-load-theme 'doom-tomorrow-night)))

(use-package doom-themes
  :ensure t
  :after general
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (doom-themes-org-config)
  :general (my-leader-keys
             "t t r" 'my-toggle-rose-pine
             "t t d" 'my-doom-one
             "t t g" 'my-toggle-gruvbox
             "t t t" 'my-toggle-tomorrow))

(use-package naysayer-theme
  :ensure t
  :after general
  :general (my-leader-keys "t t n" 'my-naysayer-theme))

(use-package acme-theme
  :ensure t
  :after general
  :init
  (setq acme-theme-black-fg t)
  :general (my-leader-keys "t t a" 'my-acme-theme))

(use-package leuven-theme :ensure t)

(use-package kaolin-themes :ensure t)

(use-package miasma-theme :ensure t)

(use-package tao-theme :ensure t)

(with-eval-after-load 'general
  (my-leader-keys
    "t t s" 'my-toggle-solarized))

(defun my-toggle-solarized ()
  "Toggle between light and dark solarized themes."
  (interactive)
  (if (eq (nth 0 custom-enabled-themes) 'doom-solarized-dark)
      (my-solarized-light)
    (my-solarized-dark)))

(defun my-solarized-light ()
  "Clear previous theme and load solarized light"
  (interactive)
  (my-load-theme 'doom-solarized-light))

(defun my-solarized-dark ()
  "Clear previous theme and load solarized dark"
  (interactive)
  (my-load-theme 'doom-solarized-dark))

(defun my-clear-theme ()
  "Clear current theme"
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defun my-load-theme (&optional theme)
  "Load THEME after clearing the previous one.
If called interactively, prompt for a theme name.
If THEME is provided as an argument, load that theme directly."
  (interactive)
  (my-clear-theme)
  (if theme
      (load-theme theme t)
    (call-interactively 'load-theme)))

(defun my-rose-pine ()
  "Clear previous theme and load rosé pine."
  (interactive)
  (my-load-theme 'doom-rose-pine))

(defun my-rose-pine-dawn ()
  "Clear previous theme and load rosé pine dawn."
  (interactive)
  (my-load-theme 'doom-rose-pine-dawn))

(defun my-doom-one ()
  "Clear previous theme and load doom-one."
  (interactive)
  (my-load-theme 'doom-one))

(defun my-naysayer-theme ()
  "Clear previous theme and load naysayer."
  (interactive)
  (my-load-theme 'naysayer))

(defun my-acme-theme ()
  "Clear previous theme and load acme."
  (interactive)
  (my-load-theme 'acme))

;; (setq my-catppuccin-flavors (my-alist-keys catppuccin-flavor-alist))

;; (defun my-catppuccin-theme (flavor)
;;   "Clear previous theme and load selected catppuccin FLAVOR."
;;   (interactive
;;    (list (intern (completing-read "Choose a flavor: "
;;                                   my-catppuccin-flavors))))
;;   (my-clear-theme)
;;   (catppuccin-load-flavor flavor))

(defun my-gruvbox ()
  "Clear previous theme and load gruvbox."
  (interactive)
  (my-load-theme 'doom-gruvbox))

(defun my-gruvbox-light ()
  "Clear previous theme and load gruvbox."
  (interactive)
  (my-load-theme 'doom-gruvbox-light))

(defun my-kaolin-dark ()
  "Clear previous theme and load kaolin dark."
  (interactive)
  (my-load-theme 'kaolin-dark))

(defun my-kaolin-light ()
  "Clear previous theme and load kaolin light."
  (interactive)
  (my-load-theme 'kaolin-light))

(defun my-kaolin-mono-dark ()
  "Clear previous theme and load kaolin mono dark."
  (interactive)
  (my-load-theme 'kaolin-mono-dark))

(defun my-kaolin-mono-light ()
  "Clear previous theme and load kaolin mono light."
  (interactive)
  (my-load-theme 'kaolin-mono-light))

(defun my-load-theme-in-all-frames (frame)
  "Load the current theme in the newly created FRAME.
When loaded after a new frame has been created with emacsclient, it ensures that
the theme is properly applied. In particular this solves a problem with the menu
bar not using the proper theme if the server was loaded with a different theme."
  (with-selected-frame frame
    (enable-theme (car custom-enabled-themes))
    (when (string-prefix-p "ef-" (symbol-name (car custom-enabled-themes)))
      (ef-themes-load-theme (car custom-enabled-themes)))
    (when (string-prefix-p "modus-" (symbol-name (car custom-enabled-themes)))
      (modus-themes-load-theme (car custom-enabled-themes)))))

(add-hook 'after-make-frame-functions #'my-load-theme-in-all-frames)

(when (not (getenv "WSL_DISTRO_NAME"))
  (use-package auto-dark
    :ensure t
    :init
    (setopt auto-dark-allow-osascript t ; Needed to make it work with emacsclient
                                        ; on macOS.
            auto-dark-themes '((modus-vivendi-tinted) (modus-operandi-tinted)))
    (auto-dark-mode t)
    :custom
    (custom-safe-themes t)
    :hook
    (auto-dark-dark-mode . (lambda ()
                             (modus-themes-select 'modus-vivendi-tinted)))
    (auto-dark-light-mode . (lambda ()
                              (modus-themes-select 'modus-operandi-tinted)))))

(defvar my-linux-font "Hack")
(defvar my-macos-font "SF Mono")

(if (eq system-type 'darwin)
    (defvar my-editor-font my-macos-font)
  (defvar my-editor-font my-linux-font))

(if (eq system-type 'darwin)
    (progn (defvar my-default-font my-editor-font)
           (defvar my-variable-pitch-font "Verdana")
           (defvar my-serif-font "New York"))
  (progn (defvar my-default-font my-editor-font)
         (defvar my-variable-pitch-font "DejaVu Sans")
         (defvar my-serif-font "DejaVu Serif")))

(defun my-setup-linux-fonts ()
  "Separate setups for fonts in WSL and regular GNU/Linux."
  (if (getenv "WSL_DISTRO_NAME")
      (setq my-font-height 110
            my-small-font-height 90
            my-medium-font-height 120
            my-large-font-height 130
            my-presentation-font-height 150)
    (setq my-font-height 100
          my-small-font-height 90
          my-medium-font-height 110
          my-large-font-height 130
          my-presentation-font-height 140)))

(if (eq system-type 'darwin)
    (setq my-font-height 130
          my-small-font-height 120
          my-medium-font-height 140
          my-large-font-height 160
          my-presentation-font-height 200)
  (my-setup-linux-fonts))

(set-face-attribute 'default nil
                    :family my-default-font
                    :height my-font-height)
;; (set-face-attribute 'fixed-pitch nil
;;                     :family my-editor-font
;;                     :height 1.0)
;; (set-face-attribute 'variable-pitch nil
;;                     :family my-variable-pitch-font
;;                     :height 1.0)
;; (set-face-attribute 'italic nil :slant 'italic :underline nil)

;; (defun my-reading-mode ()
;;   (interactive)
;;   (set-face-attribute 'variable-pitch nil
;;                       :family my-serif-font))
;; (defun my-quit-reading-mode ()
;;   (interactive)
;;   (set-face-attribute 'variable-pitch nil
;;                       :family my-variable-pitch-font))

(global-set-key (kbd "<f9>") 'variable-pitch-mode)
;; (add-hook 'text-mode-hook 'variable-pitch-mode)

(use-package ligature
  :ensure (:host github :repo "mickeynp/ligature.el")
  :after general
  :config
  (setq liga '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "||=" "||>" ":::" "::="
               "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!==" "!!." ">=>" ">>="
               ">>>" ">>-" ">->" "->>" "-->" "---" "-<<" "<~~" "<~>" "<*>" "<||"
               "<|>" "<$>" "<==" "<=>" "<=<" "<->" "<--" "<-<" "<<=" "<<-" "<<<"
               "<+>" "</>" "###" "#_(" "..<" "..." "+++" "/==" "///" "_|_" "www"
               "&&" "^=" "~~" "~@" "~=" "~>" "~-" "*>" "*/" "||" "|}" "|]" "|="
               "|>" "|-" "{|" "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!="
               "!!" ">:" ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|"
               "<:" "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:" "?="
               "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)" "\\\\"
               "://"))
  ;; (push "***" liga)
  ;; (push "**" liga)
  (ligature-set-ligatures 'prog-mode liga)
  (ligature-set-ligatures 'org-mode liga)
  :general
  (my-leader-keys
    "u f l" 'global-ligature-mode))

(use-package show-font :ensure t)

(use-package fontaine
  :ensure t
  :general (my-leader-keys "u f p" 'fontaine-set-preset)
  :init
  ;; Persist the latest font preset when closing/starting Emacs and
  ;; while switching between themes.
  (fontaine-mode 1)
  :custom
  (fontaine-latest-state-file
   (locate-user-emacs-file "fontaine-latest-state.eld"))
  (fontaine-presets
   `((small :default-height ,my-small-font-height)
     (regular) ; like this it uses all the fallback values and is named `regular'
     (medium :default-height ,my-medium-font-height)
     (large :default-height ,my-large-font-height)
     (presentation :default-height ,my-presentation-font-height)
     (t
      ;; I keep all properties for didactic purposes, but most can be
      ;; omitted.  See the fontaine manual for the technicalities:
      ;; <https://protesilaos.com/emacs/fontaine>.
      :default-family ,my-default-font
      :default-weight regular
      :default-height ,my-font-height

      :fixed-pitch-family ,my-default-font ; falls back to :default-family
      :fixed-pitch-weight nil ; falls back to :default-weight
      :fixed-pitch-height 1.0 ;,(/ 1 1.1)

      :fixed-pitch-serif-family nil ; falls back to :default-family
      :fixed-pitch-serif-weight nil ; falls back to :default-weight
      :fixed-pitch-serif-height 1.0

      :variable-pitch-family ,my-variable-pitch-font
      :variable-pitch-weight nil
      :variable-pitch-height 1.0 ; 1.1

      :mode-line-active-family nil ; falls back to :default-family
      :mode-line-active-weight nil ; falls back to :default-weight
      :mode-line-active-height 1.0

      :mode-line-inactive-family nil ; falls back to :default-family
      :mode-line-inactive-weight nil ; falls back to :default-weight
      :mode-line-inactive-height 1.0

      :header-line-family nil ; falls back to :default-family
      :header-line-weight nil ; falls back to :default-weight
      :header-line-height 1.0

      :line-number-family nil ; falls back to :default-family
      :line-number-weight nil ; falls back to :default-weight
      :line-number-height 1.0

      :tab-bar-family nil ; falls back to :default-family
      :tab-bar-weight nil ; falls back to :default-weight
      :tab-bar-height 1.0

      :tab-line-family nil ; falls back to :default-family
      :tab-line-weight nil ; falls back to :default-weight
      :tab-line-height 1.0

      :bold-family nil ; use whatever the underlying face has
      :bold-weight nil

      :italic-family nil
      :italic-slant nil

      :line-spacing nil)))

  :config
  ;; Set the last preset or fall back to desired style from `fontaine-presets'
  ;; (the `regular' in this case).
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))

(use-package display-line-numbers
  :ensure nil
  :after general
  :config
  (defun my-display-line-numbers-absolute ()
    "Setup for absolute line numbers."
    (interactive)
    (setopt display-line-numbers-type t)
    (display-line-numbers-mode))

  (defun my-display-line-numbers-relative ()
    "Setup for relative line numbers."
    (interactive)
    (setopt display-line-numbers-type 'relative)
    (display-line-numbers-mode))

  (defun my-display-line-numbers-visual ()
    "Setup for relative line numbers."
    (interactive)
    (setopt display-line-numbers-type 'visual)
    (display-line-numbers-mode))

  (defun my-display-line-numbers-hidden ()
    "Hide line numbers."
    (interactive)
    (display-line-numbers-mode -1))
  :custom
  (display-line-numbers-width 5)
  (display-line-numbers-widen t)
  (display-line-numbers-grow-only t)
  :general
  (my-leader-keys
    "u l a" 'my-display-line-numbers-absolute
    "u l r" 'my-display-line-numbers-relative
    "u l v" 'my-display-line-numbers-visual
    "u l h" 'my-display-line-numbers-hidden))

(defun my-toggle-show-trailing-whitespace ()
  "Toggle whether or not to show trailing whitespace in buffer."
  (interactive)
  (if (eq show-trailing-whitespace nil)
      (setopt show-trailing-whitespace t)
    (setopt show-trailing-whitespace nil)))

(with-eval-after-load 'general
  (my-leader-keys
    "t w" 'my-toggle-show-trailing-whitespace))

(use-package nerd-icons :ensure t)

(use-package nerd-icons-dired
  :ensure t
  :hook ((dired-mode . nerd-icons-dired-mode)
         ;; prevent icons from overlapping vertically
         (dired-mode . (lambda () (setopt line-spacing 0.25)))))

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(column-number-mode 1)

(set-face-attribute 'mode-line-active nil :inherit 'mode-line)

(setopt visible-bell nil
        ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

(setopt display-time-format " %H:%M "
        display-time-interval 60
        display-time-default-load-average nil)

;; Only display current date and time, not email stuff
(setopt display-time-string-forms
        '((propertize (format-time-string display-time-format now)
                      ;; 'face 'display-time-date-and-time
                      'help-echo (format-time-string "%a %b %e, %Y" now))
          " "))

(display-time-mode 1)

(use-package minions
  :ensure t
  :after general
  :init
  (minions-mode))

(use-package nerd-icons-completion
  :ensure t
  :after (marginalia nerd-icons)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :init
  (nerd-icons-completion-mode))

(use-package marginalia
  :ensure t
  :after (vertico general)
  :general
  (:keymaps 'minibuffer-local-map
            "M-a" 'marginalia-cycle)
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

(use-package vertico
  :ensure t
  :demand t ; Otherwise won't get loaded immediately
  :after general
  :general
  (:keymaps 'global
            "C-<" #'vertico-repeat ; C-S-,
            )
  (:keymaps 'vertico-map
            "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
            "<escape>" #'minibuffer-keyboard-quit
            "?" #'minibuffer-completion-help
            "C-M-n" #'vertico-next-group
            "C-M-p" #'vertico-previous-group
            ;; Multiform toggles
            "<backspace>" #'vertico-directory-delete-char
            "C-w" #'vertico-directory-delete-word
            "C-<backspace>" #'vertico-directory-delete-word
            "RET" #'vertico-directory-enter
            "C-i" #'vertico-quick-insert
            "C-o" #'vertico-quick-exit
            "M-o" #'kb/vertico-quick-embark
            "M-G" #'vertico-multiform-grid
            "M-F" #'vertico-multiform-flat
            "M-R" #'vertico-multiform-reverse
            "M-U" #'vertico-multiform-unobtrusive
            "C-l" #'kb/vertico-multiform-flat-toggle
            )
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
         (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
         )
  :custom
  (vertico-count 13)
  (vertico-resize t)
  (vertico-cycle nil)
  ;; Extensions
  (vertico-grid-separator "       ")
  (vertico-grid-lookahead 50)
  (vertico-buffer-display-action '(display-buffer-reuse-window))
  (vertico-multiform-categories
   '((file reverse)
     (consult-grep buffer)
     (consult-location)
     (imenu buffer)
     (library reverse indexed)
     (org-roam-node reverse indexed)
     (t reverse)
     ))
  (vertico-multiform-commands
   '(("flyspell-correct-*" grid reverse)
     (org-refile grid reverse indexed)
     (consult-yank-pop indexed)
     (consult-flycheck)
     (consult-lsp-diagnostics)
     ))
  :init
  (defun kb/vertico-multiform-flat-toggle ()
    "Toggle between flat and reverse."
    (interactive)
    (vertico-multiform--display-toggle 'vertico-flat-mode)
    (if vertico-flat-mode
        (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
      (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
  (defun kb/vertico-quick-embark (&optional arg)
    "Embark on candidate using quick keys."
    (interactive)
    (when (vertico-quick-jump)
      (embark-act arg)))

  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun kb/basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun kb/basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
  :config
  ;; Manually load extension files
  (dolist (module '(vertico-indexed
                    vertico-flat
                    vertico-grid
                    vertico-mouse
                    vertico-quick
                    vertico-buffer
                    vertico-repeat
                    vertico-reverse
                    vertico-directory
                    vertico-multiform
                    vertico-unobtrusive))
    (require module))

  (vertico-mode)
  ;; Extensions
  (vertico-multiform-mode)

  ;; Prefix the current candidate with “» ”. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "» " 'face 'vertico-current)
                   "  ")
                 cand))))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)    ; I want to be in control!
  (completion-category-overrides
   '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                   orderless
                   ))
     ))

  (orderless-component-separator 'orderless-escapable-split-on-space)
  (orderless-matching-styles
   '(orderless-literal
     orderless-prefixes
     orderless-initialism
     orderless-regexp
     ;; orderless-flex
     ;; orderless-strict-leading-initialism
     ;; orderless-strict-initialism
     ;; orderless-strict-full-initialism
     ;; orderless-without-literal          ; Recommended for dispatches instead
     ))
  (orderless-style-dispatchers
   '(prot-orderless-literal-dispatcher
     prot-orderless-strict-initialism-dispatcher
     prot-orderless-flex-dispatcher
     ))
  :init
  (defun orderless--strict-*-initialism (component &optional anchored)
    "Match a COMPONENT as a strict initialism, optionally ANCHORED.
The characters in COMPONENT must occur in the candidate in that
order at the beginning of subsequent words comprised of letters.
Only non-letters can be in between the words that start with the
initials.

If ANCHORED is `start' require that the first initial appear in
the first word of the candidate.  If ANCHORED is `both' require
that the first and last initials appear in the first and last
words of the candidate, respectively."
    (orderless--separated-by
        '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
      (cl-loop for char across component collect `(seq word-start ,char))
      (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
      (when (eq anchored 'both)
        '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

  (defun orderless-strict-initialism (component)
    "Match a COMPONENT as a strict initialism.
This means the characters in COMPONENT must occur in the
candidate in that order at the beginning of subsequent words
comprised of letters.  Only non-letters can be in between the
words that start with the initials."
    (orderless--strict-*-initialism component))

  (defun prot-orderless-literal-dispatcher (pattern _index _total)
    "Literal style dispatcher using the equals sign as a suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
    "Leading initialism  dispatcher using the comma suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "," pattern)
      `(orderless-strict-initialism . ,(substring pattern 0 -1))))

  (defun prot-orderless-flex-dispatcher (pattern _index _total)
    "Flex  dispatcher using the tilde suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "." pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))
  )

(use-package corfu
  :ensure t
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto nil)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 3)

  ;; (corfu-separator ?\s)          ;; (M-SPC) Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match t)
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Popup info
  ;; Display information about current completion item after 0.2 seconds.
  (corfu-popupinfo-delay 0.2)

  ;; Keybindings
  (global-set-key (kbd "C-M-i") #'corfu-complete) ; To invoke completion manually.

  :bind
  (:map corfu-map (("SPC" . corfu-insert-separator)
                   ("RET" . nil)
                   ("M-n" . corfu-next)
                   ("M-p" . corfu-previous)
                   ("C-M-i" . corfu-insert)))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; TAB cycle if there are only few candidates
  (setopt completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  (setopt tab-always-indent t))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

;; Add extensions
(use-package cape
  :ensure t
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrmy-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; NOTE: The order matters!
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  (kind-icon-blend-frac 0.08)
  (kind-icon-default-style
   '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.5 :scale 1.0))
  (kind-icon-formatted 'variable)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package yasnippet
  :ensure t
  :init
  (setopt yas-snippet-dirs
          `(,(concat user-emacs-directory
                     (file-name-as-directory "snippets"))))

  :hook
  ;; still have to manually activate the mode for some reason...
  (snippet-mode . (lambda () (set (make-local-variable 'require-final-newline) nil)))
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :after yasnippet
  :ensure t)

(use-package yasnippet-capf
  :ensure t
  :after cape
  :config
  (add-to-list 'completion-at-point-functions #'yasnippet-capf))

(use-package flymake :ensure t)

(use-package eglot
  :ensure t
  :after (general flymake)
  :general (my-leader-keys "c a" 'eglot-code-actions)
  :custom
  (eglot-autoshutdown t)

  ;; Hide code-action indicators to reduce noise.
  (eglot-code-action-indications '())

  ;; Disables highlighting of the symbol at point.
  (eglot-ignored-server-capabilities '(:documentHighlightProvider)))

(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))

(setopt treesit-font-lock-level 2) ; default: 3

(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package rust-mode
  :ensure t
  :init
  (setq rust-mode-treesitter-derive t
        rust-format-on-save t)
  :mode ("\\.rs\\'" . rust-mode)
  :hook ((rust-mode . (lambda () (setopt indent-tabs-mode nil)))
         (rust-mode . eglot-ensure)))

(use-package flycheck-rust
  :ensure t
  :after (rust-mode flycheck)
  :hook (flycheck-mode . flycheck-rust-setup))

(add-to-list 'auto-mode-alist '("\\.pl?\\'" . prolog-mode))

(use-package yaml-mode
  :ensure t
  :hook
  (yaml-mode . (lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent))))

(use-package markdown-mode
  :ensure t
  :demand t
  :mode ("\\.md\\'" . gfm-mode)
  :init
  (setopt markdown-command "pandoc"
          markdown-header-scaling nil
          markdown-enable-math t
          markdown-make-gfm-checkboxes-buttons t
          markdown-fontify-code-blocks-natively t)
  :config
  (add-to-list 'markdown-code-lang-modes '("js" . js-ts-mode)))

(defun cc/markdown-to-org-region (start end)
  "Convert Markdown formatted text in region (START, END) to Org.

This command requires that pandoc (man page `pandoc(1)') be
installed."
  (interactive "r")
  (shell-command-on-region
   start end
   "pandoc -f markdown -t org --wrap=preserve" t t))

(use-package clojure-mode :ensure t)

(use-package aggressive-indent
  :ensure t
  :hook '(clojure-mode
          elisp-mode
          emacs-lisp-mode
          lisp-mode
          common-lisp-mode
          scheme-mode))

(use-package smartparens
  :ensure t
  :init (require 'smartparens-config)
  :hook (clojure-mode . smartparens-mode))

;; Invoke the nREPL with `cider-jack-in' when visiting a file inside a clojure
;; project.
(use-package cider
  :ensure t
  :init
  ;; Open a REPL buffer without switching focus to it when Cider is invoked.
  (setopt cider-repl-pop-to-buffer-on-connect 'display-only)

  ;; Auto-trim REPL large buffer.
  (setopt cider-repl-buffer-size-limit 100000)
  :hook
  ;; Keep prompt on bottom line when output is printed.
  (cider-repl-mode . (lambda ()
                       (setopt scroll-conservatively 101))))

(use-package sly
  :ensure t
  :init (setq inferior-lisp-program (executable-find "sbcl"))
  :mode ("\\.lisp?\\'" . common-lisp-mode)
  :hook
  (sly-mode . (lambda ()
                (unless (sly-connected-p)
                  (save-excursion (sly))))))

(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . tsx-ts-mode))

(use-package web-mode :ensure t)

(use-package jq-mode
  :ensure t
  :mode ("\\.jq\\'" . jq-mode))

(use-package restclient
  :ensure t
  :mode ("\\.http\\'" . restclient-mode))

;; Below makes sure that restclient-jq can be required which
;; is a must if we want to be able to use jq related tasks.
(use-package restclient-jq
  :ensure t
  :after restclient
  :config (require 'restclient-jq))

(use-package mermaid-mode :ensure t :mode "\\.mmd$")

(use-package lua-mode
  :ensure t
  :mode "\\.lua\\'"
  :config
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((lua-mode lua-ts-mode) . ("lua-language-server"))))
  (add-to-list 'project-vc-extra-root-markers ".busted")
  :hook (lua-mode . eglot-ensure))

(use-package tuareg :ensure t)

;; OCaml configuration
;;  - better error and backtrace matching

(defun set-ocaml-error-regexp ()
  (set
   'compilation-error-regexp-alist
   (list '("[Ff]ile \\(\"\\(.*?\\)\", line \\(-?[0-9]+\\)\\(, characters \\(-?[0-9]+\\)-\\([0-9]+\\)\\)?\\)\\(:\n\\(\\(Warning .*?\\)\\|\\(Error\\)\\):\\)?"
           2 3 (5 . 6) (9 . 11) 1 (8 compilation-message-face)))))

(add-hook 'tuareg-mode-hook 'set-ocaml-error-regexp)
(add-hook 'caml-mode-hook 'set-ocaml-error-regexp)

(use-package dockerfile-mode :ensure t)

(use-package csv-mode
  :ensure t
  :mode "\\.csv\\'")

(defun my-maybe-load-bash-ts-mode ()
  "Load bash-ts-mode if the file starts with #!/bin/bash."
  (when (buffer-file-name)
    (save-excursion
      (goto-char (point-min))
      (when (looking-at "#!/bin/bash")
        (bash-ts-mode)))))

(add-hook 'find-file-hook 'my-maybe-load-bash-ts-mode)

(setopt c-ts-mode-indent-style 'k&r
        c-ts-mode-indent-offset 4)

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(use-package consult-flycheck :ensure t)

(use-package apheleia
  :ensure t
  :config
  ;; Python
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(ruff-isort ruff))
  (setf (alist-get 'python-ts-mode apheleia-mode-alist)
        '(ruff-isort ruff)))

(use-package magit
  :ensure t
  :custom
  ;; Make Magit the only window in the frame when invoked.
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

  ;; Restore previous layout when exiting Magit.
  (magit-bury-buffer-function #'magit-restore-window-configuration)

  :general
  (my-leader-keys
    "g g" 'magit-status
    "g i" 'magit-info
    "g l" 'magit-log))

(use-package forge
  :ensure t
  :after (general magit))

(use-package diff-hl
  :ensure t
  :init
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode) ; update diff-hl on the fly
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode) ; show diff in dired
  :hook
  (magit-pre-refresh . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh))

(use-package eshell-syntax-highlighting
  :ensure t
  :defer t
  :hook (eshell-mode . eshell-syntax-highlighting-mode))

(add-hook 'eshell-first-time-mode-hook
          (lambda ()
            (add-to-list 'eshell-visual-options '("git" "--help" "--paginate"))
            (add-to-list 'eshell-visual-subcommands '("git" "log" "diff" "show"))))

(setopt eshell-history-size 10000)

(global-set-key (kbd "<f12>") 'eshell)

(use-package eat
  :ensure (
           :host codeberg
           :repo "akib/emacs-eat"
           :files ("*.el" ("term" "term/*.el") "*.texi"
                   "*.ti" ("terminfo/e" "terminfo/e/*")
                   ("terminfo/65" "terminfo/65/*")
                   ("integration" "integration/*")
                   (:exclude ".dir-locals.el" "*-tests.el")))
  :after general
  :general
  (my-leader-keys "` e" 'eshell)
  (my-leader-keys "` a" 'eat)
  :custom
  (eat-term-name "xterm-256color")
  (eat-kill-buffer-on-exit t)

  ;; The mode hooks below integrate eat with eshell. I'm currently testing out
  ;; what I can do using only eshell so for now they are disabled.

  :hook ((eshell-load . eat-eshell-mode)
         (eshell-load . eat-eshell-visual-command-mode)))

(use-package eshell-atuin
  :ensure t
  :after eshell
  :bind (:map eshell-mode-map
              ("C-r" . eshell-atuin-history))
  :hook (eshell-mode . eshell-atuin-mode))

(use-package project
  :general
  (my-leader-keys
    ;; leader prefix for built-in project.el
    "p" '(:keymap project-prefix-map :wk "project"))
  :ensure nil)

(use-package dired
  :ensure nil ; built-in
  :general
  (my-leader-keys
    "d d" 'dired
    "d j" 'dired-jump
    "d w" '((lambda () (interactive) (dired denote-workdir))
            :wk "Dired to work notes"))
  :config
  (when (string= system-type "darwin")
    (setopt dired-use-ls-dired t
            insert-directory-program "/opt/homebrew/bin/gls"))
  :hook
  (dired-mode . dired-hide-details-mode)
  :custom
  (dired-listing-switches "-aBhl --group-directories-first")
  (dired-create-destination-dirs t))

(use-package dired-single
  :ensure (:host github :repo "emacsattic/dired-single"))

(with-eval-after-load 'dired
  (define-key dired-mode-map "`" (lambda () (interactive) (eshell))))

(defadvice isearch-exit (after dired-enter-directory-or-file activate)
  "In dired mode, enter directory or open file after isearch."
  (when (eq major-mode 'dired-mode)
    (let ((file (dired-get-file-for-visit)))
      (when file
        (dired-find-file)))))

(use-package dired-hide-dotfiles :ensure t)

(use-package treemacs
  :ensure t
  :after general
  :defer t
  :general (my-leader-keys "f e" 'treemacs))

(use-package treemacs-magit
  :ensure t
  :after (treemacs magit))

(use-package treemacs-nerd-icons
  :ensure t
  :after (treemacs nerd-icons)
  :config (treemacs-load-theme "nerd-icons"))

(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

;; https://karthinks.com/software/jumping-directories-in-eshell/
(defun eshell/z (&optional regexp)
  "Navigate to a previously visited directory in eshell, or to
any directory proferred by `consult-dir'."
  (let ((eshell-dirs (delete-dups
                      (mapcar 'abbreviate-file-name
                              (ring-elements eshell-last-dir-ring)))))
    (cond
     ((and (not regexp) (featurep 'consult-dir))
      (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                 :narrow ?e
                                                 :category file
                                                 :face consult-file
                                                 :items ,eshell-dirs))
             (consult-dir-sources (cons consult-dir--source-eshell
                                        consult-dir-sources)))
        (eshell/cd (substring-no-properties
                    (consult-dir--pick "Switch directory: ")))))
     (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                     (completing-read "cd: " eshell-dirs)))))))

(use-package zoxide
  :ensure t
  :after general
  :hook (dired-mode . zoxide-add)
  :general
  (my-leader-keys
    "d z" '(zoxide-travel :wk "Find directory with Zoxide")))

(use-package editorconfig
  :ensure t
  :config (editorconfig-mode 1))

;; Example configuration for Consult
(use-package consult
  :ensure t
  :after general
  :general
  (my-leader-keys
    "s g" 'consult-git-grep
    "s s" 'consult-ripgrep
    "s l" 'consult-line
    "s L" 'consult-line-multi)

  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setopt register-preview-delay 0.5)
  (setq register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setopt xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setopt consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )

(use-package anzu
  :ensure t
  :config
  (global-anzu-mode))

(global-set-key (kbd "C-:") 'avy-goto-char-timer)

(use-package org
  :ensure nil
  :init
  (setopt org-directory (expand-file-name "~/Documents/org")
          org-agenda-files `(,org-directory)
          org-default-notes-file (concat org-directory "/inbox.org")
          org-work-notes-file (concat org-directory "/work.org")
          org-journelly-file (concat org-directory "/Journelly.org"))

  (require 'org-indent)

  :custom
  (org-return-follows-link t)
  (org-startup-with-inline-images t)
  (org-fontify-quote-and-verse-blocks t)
  (org-image-actual-width '(300))
  (org-pretty-entities t)
  ;; (org-auto-align-tags nil)
  ;; (org-tags-column 0)
  (org-fold-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)
  (org-startup-indented t)
  (org-M-RET-may-split-line '((default . nil)))

  (org-log-done 'time)
  (org-log-into-drawer t)

  ;; Ask how many minutes to keep if idle for at least 15 minutes.
  (org-clock-idle-time 15)

  (org-capture-templates
   '(("l" "New journe(l)ly note" entry
      (file org-journelly-file)
      "* %U @ %(journelly-generate-metadata)\n%?" :prepend t)

     ("m" "Meetings")
     ("mm" "Meetings - Mio" entry
      (file+olp org-work-notes-file "Mio" "Meetings")
      "* %^T %?" :empty-lines 1)

     ("n" "Notes")
     ("nd" "Denote")

     ("t" "Tasks")
     ("tt" "New inbox task" entry
      (file org-default-notes-file)
      "* TODO %i%?" :empty-lines 1)
     ("tw" "Work tasks")
     ("twm" "New Mio task" entry
      (file+olp org-work-notes-file "Mio" "Tasks")
      "* TODO %i%?" :empty-lines 1)))

  (org-refile-targets
   '((org-agenda-files :maxlevel . 4)
     (nil :maxlevel . 4)))

  (org-refile-use-outline-path t)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-use-cache t)

  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n!)" "WAIT(w@/!)" "|" "DONE(d!)" "CANX(c@/!)")))

  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))

  :general (my-leader-keys
             "o b t" 'org-babel-tangle
             "o l d" 'org-toggle-link-display))

(use-package olivetti
  :ensure t
  :after general
  :general
  (my-leader-keys "u o" 'olivetti-mode)
  :init
  (setopt olivetti-body-width 120
          olivetti-minimum-body-width 72)
  :hook (((org-mode markdown-mode Info-mode) . olivetti-mode)
         (olivetti-mode . (lambda ()
                            (cond ((derived-mode-p 'Info-mode)
                                   (setq-local olivetti-body-width 72)))))))

(use-package org-appear
  :ensure t
  :after general
  :config
  (setopt org-appear-autoemphasis t
          org-hide-emphasis-markers t
          org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-autoentities t
          org-appear-autokeywords t
          org-appear-inside-latex t)
  :hook (org-mode . org-appear-mode)
  :general (my-leader-keys "o m a" 'org-appear-mode)) ; org->mode->appear

(setopt org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)

(defconst load-language-alist
  '((emacs-lisp . t)
    (perl       . t)
    (python     . t)
    (ruby       . t)
    (js         . t)
    (css        . t)
    (sass       . t)
    (C          . t)
    (java       . t)
    (shell      . t)
    (plantuml   . t)
    (lua        . t)
    (ocaml      . t))
  "Alist of org ob languages.")
(org-babel-do-load-languages 'org-babel-load-languages
                             load-language-alist)

(use-package denote
  :ensure t
  :demand t
  :init
  (setopt denote-directory (expand-file-name "~/Documents/notes/")
          denote-date-prompt-use-org-read-date t)

  (setq denote-workdir (expand-file-name "~/Documents/work-notes/mio/"))

  :config
  (setopt denote-file-type 'org)
  (denote-rename-buffer-mode 1)

  (with-eval-after-load 'org-capture
    (setopt denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("ndo" "New note" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t))

    ;; This prompts for TITLE, KEYWORDS, and SUBDIRECTORY
    (add-to-list 'org-capture-templates
                 '("ndp" "New note with prompts" plain
                   (file denote-last-path)
                   (function
                    (lambda ()
                      (denote-org-capture-with-prompts :title :keywords :signature)))
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))

  :bind
  (("C-c n n" . denote)
   ("C-c n N" . denote-type)
   ("C-c n d" . denote-date)
   ("C-c n z" . denote-signature) ; "zettelkasten" mnemonic
   ("C-c n s" . denote-subdirectory)
   ("C-c n o" . denote-sort-dired) ; "order" mnemonic
   ("C-c n r" . denote-rename-file)
   ("C-c n i" . denote-link) ; "insert" mnemonic
   ("C-c n I" . denote-add-links)
   ("C-c n b" . denote-backlinks)
   ("C-c n f f" . denote-find-link)
   ("C-c n f b" . denote-find-backlink)
   ("C-c n R" . denote-rename-file-using-front-matter)
   :map dired-mode-map
   ("C-c C-d C-i" . denote-link-dired-marked-notes)
   ("C-c C-d C-r" . denote-dired-rename-marked-files)
   ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
   ("C-c C-d C-f" . denote-dired-rename-marked-files-using-front-matter))
  :hook
  ((dired-mode . denote-dired-mode)
   (text-mode . denote-fontify-links-mode-maybe)))

(use-package denote-journal
  :ensure t
  :demand t
  :after denote
  :custom
  (denote-journal-directory (expand-file-name "journal" denote-directory))
  (denote-journal-title-format 'day-date-month-year)
  (denote-journal-keyword "journal")

  :config
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("ndj" "Journal" entry
                   (file denote-journal-path-to-new-or-existing-entry)
                   "* %U %?"
                   :kill-buffer t
                   :empty-lines 1)))

  :bind
  (("C-c n j" . denote-journal-new-entry)
   ("C-c n J" . denote-journal-new-or-existing-entry)))

(use-package denote-org
  :ensure t
  :demand t
  :after denote)

(use-package denote-markdown
  ;; TODO There is apparently Obsidian support. Maybe I could create a Silo or
  ;; something that is located at the Obsidian directory. Having the ability
  ;; to link my Obsidian notes with my denote(s) would be really nice.
  ;; Definitely going to look into this.
  :ensure t
  :demand t
  :after denote)

(use-package denote-silo
  :ensure t
  :demand t
  :after denote
  :custom
  (denote-silo-directories (list denote-directory denote-workdir)))

(use-package denote-explore
  :ensure t
  :after denote
  :custom
  ;; Where to store network data and in which format
  (denote-explore-network-directory (concat denote-directory "/graphs/"))
  (denote-explore-network-filename "denote-network")
  ;; Output format
  (denote-explore-network-format 'graphviz)
  (denote-explore-network-graphviz-filetype "svg")
  ;; Exlude keywords or regex
  (denote-explore-network-keywords-ignore '("bib"))
  :bind
  (;; Statistics
   ("C-c n e c" . denote-explore-count-notes)
   ("C-c n e C" . denote-explore-count-keywords)
   ("C-c n e b" . denote-explore-keywords-barchart)
   ("C-c n e x" . denote-explore-extensions-barchart)
   ;; Random walks
   ("C-c n e r" . denote-explore-random-note)
   ("C-c n e l" . denote-explore-random-link)
   ("C-c n e k" . denote-explore-random-keyword)
   ;; Denote Janitor
   ("C-c n e d" . denote-explore-identify-duplicate-notes)
   ("C-c n e z" . denote-explore-zero-keywords)
   ("C-c n e s" . denote-explore-single-keywords)
   ("C-c n e o" . denote-explore-sort-keywords)
   ("C-c n e r" . denote-explore-rename-keywords)
   ;; Visualise denote
   ("C-c n e n" . denote-explore-network)
   ("C-c n e v" . denote-explore-network-regenerate)
   ("C-c n e D" . denote-explore-degree-barchart)))

(use-package consult-denote
  :ensure t
  :bind
  (("C-c n c f" . consult-denote-find)
   ("C-c n c g" . consult-denote-grep))

  :custom
  (consult-denote-find-command 'consult-fd)
  (consult-denote-grep-command 'consult-ripgrep)

  :config
  (consult-denote-mode 1))

(use-package pdf-tools
  :ensure t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf")
  :hook (pdf-view-mode . (lambda () (interactive)
                           (display-line-numbers-mode -1))))

(use-package nov
  :ensure t
  :mode
  ("\\.epub\\'" . nov-mode)
  :config
  (defun my-nov-mode-setup ()
    "Tweak nov-mode to our liking."
    (setq-local line-spacing 0.2
                next-screen-context-lines 4
                shr-use-colors t)
    (when (require 'visual-fill-column nil t)
      (setq-local visual-fill-column-center-text t
                  visual-fill-column-width 64
                  nov-text-width 106)
      (visual-fill-column-mode 1))
    (when (featurep 'hl-line-mode)
      (hl-line-mode -1))
    (my-reading-font-setup)
    (olivetti-mode)
    ;; Re-render with new display settings
    (nov-render-document))
  :hook
  (nov-mode . my-nov-mode-setup))

(use-package org-noter
  :ensure t
  :custom
  ;; Directory where org-noter will look for note files if invoked in a
  ;; non-org-roam buffer
  (org-noter-notes-search-path '("~/Documents/notes/literature"))

  ;; Create highlight in pdf when creating note
  (org-noter-highlight-selected-text t)

  ;; Remember last read location in document
  (org-noter-auto-save-last-location t))

(use-package calibredb
  :ensure t
  :defer t
  :config
  (setq calibredb-root-dir "~/Documents/calibre"
        calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
        calibredb-library-alist '(("~/Documents/calibre"))
        calibredb-format-all-the-icons t
        calibredb-size-show t))

(use-package embark
  :ensure t
  :after general
  :bind
  (("C->" . embark-act)         ;; C-S-.
   ("M-." . embark-dwim)        ;; M-. also is "go-to-definition but embark-dwim does just that in that context
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :general
  (my-leader-keys
    "E E" 'embark-act
    "E h B" 'embark-bindings)

  ;; :init
  ;; Optionally replace the key help with a completing-read interface
  ;; (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package gptel
  :ensure t
  :after general
  :config
  (setq-default gptel-model 'deepseek-r1:8b
                gptel-backend (gptel-make-ollama "Ollama"
                                :host "localhost:11434"
                                :stream t
                                :models '(deepseek-r1:8b))
                gptel-default-mode 'org-mode)
  :general
  (my-leader-keys
    "a a" 'gptel
    "a g" 'gptel-menu
    "a s" 'gptel-send))

(defun my-insert-timestamp ()
  "Insert timestamp with format [%H:%M] at point."
  (interactive)
  (insert (format-time-string "[%H:%M]")))

(use-package devdocs
  :ensure t
  :after general
  :init
  (defun my-devdocs-lookup-thing-at-point ()
    "Look up definition of thing at point, using Devdocs."
    (interactive)
    (devdocs-lookup nil (thing-at-point 'symbol t)))
  :hook
  ((js-mode
    . (lambda () (setq-local devdocs-current-docs '("javascript"))))
   (markdown-mode
    . (lambda () (setq-local devdocs-current-docs '("markdown"))))
   ((elisp-mode emacs-lisp-mode)
    . (lambda () (setq-local devdocs-current-docs '("elisp"))))
   (dockerfile-mode
    . (lambda () (setq-local devdocs-current-docs '("docker"))))
   (vue-ts-mode
    . (lambda () (setq-local devdocs-current-docs '("vue~3" "javascript" "typescript")))))
  :general
  (my-leader-keys
    "h d l" 'devdocs-lookup
    "h d p" 'devdocs-peruse
    "h d i" 'devdocs-install
    "h d d" 'my-devdocs-lookup-thing-at-point))

(use-package helpful
  :ensure t
  :demand t
  :config
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  ;; (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  (global-set-key (kbd "C-h o") #'helpful-symbol))

(use-package hl-todo
  :ensure t
  :hook ((prog-mode . hl-todo-mode)
         (conf-mode . hl-todo-mode)))

(use-package transpose-frame :ensure t)

(use-package ace-window
  :bind (("C-x o" . ace-window)))

(defun nuke-all-buffers ()
  "Kill all buffers except for *scratch*."
  (interactive)
  (mapc
   (lambda (buffer)
     (kill-buffer buffer))
   (buffer-list))
  (delete-other-windows))

(my-leader-keys "b K" 'nuke-all-buffers)

(defun my-kill-buffer-and-delete-window ()
  "Kill the active buffer and delete the containing window."
  (interactive)
  (kill-buffer)
  (delete-window))

(global-set-key (kbd "C-x M-k") 'my-kill-buffer-and-delete-window)

(setq-default compilation-scroll-output t)

(global-set-key (kbd "<f5>") 'compile)
(global-set-key (kbd "S-<f5>") 'recompile)
(global-set-key (kbd "C-<f5>") 'project-compile)

(use-package kubed
  :ensure (:host github :repo "eshelyaron/kubed")
  :bind-keymap ("C-c K" . kubed-prefix-map)
  :bind (:map kubed-prefix-map ("t" . kubed-transient)))

(use-package dir-config
  :ensure t
  :custom
  (dir-config-file-names '(".dir-config.el"))
  (dir-config-allowed-directories '("~/repos"))
  :config
  (dir-config-mode))
