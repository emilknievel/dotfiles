;;; config.el --- Configure emacs -*- lexical-binding:t -*-

;;; Commentary:

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programming source file located at
;; https://github.com/emilknievel/dotfiles/blob/main/emacs/.config/emacs/config.org
;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

;;; Code:

(unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
  (ido-mode t)
  (setq ido-enable-flex-matching t))

(unless (memq window-system '(mac ns))
  (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR." t)

(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; https://www.emacswiki.org/emacs/SavePlace
(save-place-mode 1)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(savehist-mode 1)
(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      ;; visible-bell t
      load-prefer-newer t
      backup-by-copying t
      frame-inhibit-implied-resize t
      ediff-window-setup-function 'ediff-setup-windows-plain
      custom-file (expand-file-name "custom.el" user-emacs-directory))

(unless backup-directory-alist
  (setq backup-directory-alist `(("." . "/tmp/backups/"))))

(make-directory "/tmp/auto-saves/" t)

(setq auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
      auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))

(add-hook 'kill-emacs-hook
          (lambda ()
            (dolist (file (directory-files temporary-file-directory t "\\`auto-save-file-name-p\\'"))
              (delete-file file))))

(setq create-lockfiles nil)

(setq calendar-week-start-day 1)

(use-package exec-path-from-shell
  :config
  (setq exec-path-from-shell-variables '("PATH"
                                         "TERM_THEME"
                                         "WSL_DISTRO_NAME"
                                         "DOTNET_ROOT"
                                         "XDG_CONFIG_HOME"
                                         "FUNCTIONS_CORE_TOOLS_TELEMETRY_OPTOUT"
                                         "OPAM_SWITCH_PREFIX"
                                         "CAML_LD_LIBRARY"
                                         "OCAML_TOPLEVEL_PATH"
                                         "BUN_INSTALL"
                                         "NODE_EXTRA_CA_CERTS"))
  (exec-path-from-shell-initialize)
  :when (or (memq window-system '(mac ns x)) (daemonp)))

(setenv "LANG" "en_US.UTF-8")

(use-package gnutls
  :defer t
  :custom
  (gnutls-verify-error t))

(use-package auth-source-1password
  :config (auth-source-1password-enable))

(use-package which-key
  :diminish
  :init
  (which-key-mode)
  (which-key-setup-minibuffer)
  :config
  (setq which-key-idle-delay 0.3))

(use-package general
  :init
  ;; (global-unset-key (kbd "C-M-SPC"))
  (global-unset-key (kbd "C-z"))
  :after which-key
  :config
  ;; (general-evil-setup t)
  (general-define-key
   ;; :keymaps '(normal insert emacs)
   :prefix "C-z"
   ;; :global-prefix "C-M-SPC"
   :prefix-map 'ev/leader-key-map

   ;; Top level functions
   "SPC" '(execute-extended-command :wk "M-x")

   ;; Prefixes

   "a" '(:ignore t :wk "AI")
   "a c" '(:ignore t :wk "Copilot")
   "b" '(:ignore t :wk "Buffer")
   "c" '(:ignore t :wk "Code")
   "d" '(:ignore t :wk "Directory")
   "E" '(:ignore t :wk "Embark")
   "f" '(:ignore t :wk "File")
   "f c" '(:ignore t :wk "Config")
   "g" '(:ignore t :wk "Git")
   "h" '(:ignore t :wk "Help")
   "h d" '(:ignore t :wk "Devdocs")
   "n" '(:ignore t :wk "Notes")
   "o" '(:ignore t :wk "Org")
   "o b" '(:ignore t :wk "Babel")
   "p" '(:ignore t :wk "Project")
   "q" '(:ignore t :wk "Quit")
   "s" '(:ignore t :wk "Search")
   "t" '(:ignore t :wk "Toggle")
   "u" '(:ignore t :wk "UI")
   "u l" '(:ignore t :wk "Linum")
   "u f" '(:ignore t :wk "Fonts")
   "w" '(:ignore t :wk "Windows")))

(defun ev/reload-emacs-config ()
  "Tangle org file and reload the emacs config."
  (interactive)
  (org-babel-tangle-file (expand-file-name "config.org" user-emacs-directory))
  (load-file (expand-file-name "config.el" user-emacs-directory)))

(defun ev/edit-emacs-config ()
  "Edit Emacs literate config file."
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))

(general-define-key
 :prefix-map 'ev/leader-key-map
 "f c r" 'ev/reload-emacs-config
 "f c f" 'ev/edit-emacs-config
 "f f" 'find-file
 "f l" 'load-file
 "f s" 'save-buffer)

(general-define-key
 :prefix-map 'ev/leader-key-map
 ;; buffers
 "b" '(nil :wk "buffers")
 "b b" 'switch-to-buffer
 "b B" 'ibuffer
 "b c" 'consult-buffer
 "b X" 'scratch-buffer
 "q q" 'save-buffers-kill-terminal
 "b r" 'revert-buffer-quick)

(general-define-key
 :prefix-map 'ev/leader-key-map
 ;; help
 "h f" 'describe-function
 "h v" 'describe-variable
 "h k" 'describe-key
 "h i" 'info
 "h b" 'describe-bindings
 "h a" 'describe-face)

(general-define-key
 :prefix-map 'ev/leader-key-map
 ;; toggles
 "t v" '(visual-line-mode :wk "visual line mode")
 "t n" '(display-line-numbers-mode :wk "display line numbers")
 "t c" '(visual-fill-column-mode :wk "visual fill column mode"))

(general-define-key
 :prefix-map 'ev/leader-key-map
 "u f v" 'variable-pitch-mode
 "u f b" 'ev/big-font-size
 "u f +" 'ev/increase-font-size
 "u f -" 'ev/decrease-font-size
 "u f 0" 'ev/reset-font-size)

(general-define-key
 :prefix-map 'ev/leader-key-map
 ;; emacsclient
 "q k" '(save-buffers-kill-emacs :wk "Kill emacsclient process"))

(use-package surround
  :ensure t
  :bind-keymap ("C-c s" . surround-keymap))

(use-package hydra)

(use-package iedit
  :general
  (ev/leader-key-map "e" 'iedit-mode))

(require 'whitespace)

(use-package expand-region
  :general (ev/leader-key-map "=" 'er/expand-region))

(use-package vundo
  :general (ev/leader-key-map "c u" 'vundo))

(use-package multiple-cursors
  :ensure t
  :config
  (defhydra hydra-multiple-cursors (global-map "C-c")
    "multiple cursors"
    ("M-d" mc/mark-next-like-this "mark next")
    ("M-D" mc/unmark-previous-like-this "mark previous")))

(setq inhibit-startup-screen t)

(setopt confirm-kill-emacs 'y-or-n-p)

(setq ns-use-proxy-icon nil
      ns-use-mwheel-momentum t
      ns-use-mwheel-acceleration t
      frame-resize-pixelwise t
      mac-command-modifier 'meta
      mac-right-command-modifier 'none
      mac-option-modifier nil
      mac-control-modifier 'control)

(setq custom-theme-directory "~/.config/emacs/themes/")

(defun ev/clear-theme ()
  "Clear current theme"
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defun ev/solarized-light ()
  "Clear previous theme and load solarized light"
  (interactive)
  (ev/clear-theme)
  (load-theme 'doom-solarized-light t))

(defun ev/solarized-dark ()
  "Clear previous theme and load solarized dark"
  (interactive)
  (ev/clear-theme)
  (load-theme 'doom-solarized-dark t))

(use-package modus-themes
  :ensure t
  :custom
  (modus-themes-mixed-fonts t)
  (modus-themes-variable-pitch-ui t)
  (modus-themes-common-palette-overrides
   '((fringe unspecified)
     (bg-paren-match bg-magenta-intense)
     (fg-heading-1 blue-warmer)
     (fg-heading-2 yellow-cooler)
     (fg-heading-3 cyan-cooler)))
  (modus-themes-headings
   '((1 . (1.5))
     (2 . (1.4))
     (3 . (1.3))
     (4 . (1.2))
     (5 . (1.1))
     (6 . (1.0))
     (7 . (1.0))
     (8 . (1.0))))
  (modus-themes-variable-pitch-ui nil))

(use-package ef-themes
  :ensure t
  :init
  (setq ef-themes-mixed-fonts t)
  (setq ef-themes-common-palette-overrides
   '((fringe unspecified)))
  (setq ef-themes-headings
   '((1 . (1.5))
     (2 . (1.4))
     (3 . (1.3))
     (4 . (1.2))
     (5 . (1.1))
     (6 . (1.0))
     (7 . (1.0))
     (8 . (1.0))))
  (setq ef-themes-variable-pitch-ui t)
  (setq ef-themes-to-toggle '(ef-dark ef-light))
  (setq ef-themes-mixed-fonts t)
  :general (ev/leader-key-map
            "t t" 'ef-themes-toggle))
(load-theme 'ef-dark t nil)

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  ;; (setq doom-themes-treemacs-theme "doom-atom")
  ;; (doom-themes-treemacs-config)
  (doom-themes-org-config))

(use-package auto-dark
  :diminish
  :init
  (setq auto-dark-allow-osascript t) ; needed for it to work with emacsclient on macOS.
  (setq auto-dark-dark-theme 'ef-dark
        auto-dark-light-theme 'ef-light)
  :config
  (add-hook 'auto-dark-dark-mode-hook
            (lambda ()
              (mapc #'disable-theme custom-enabled-themes)
              (load-theme auto-dark-dark-theme t nil)))
  (add-hook 'auto-dark-light-mode-hook
            (lambda ()
              (mapc #'disable-theme custom-enabled-themes)
              (load-theme auto-dark-light-theme t nil)))
  (auto-dark-mode t))

(defvar ev/linux-font "Iosevka Comfy")
(defvar ev/macos-font "SF Mono")

(if (eq system-type 'darwin)
    (defvar ev/editor-font ev/macos-font)
  (defvar ev/editor-font ev/linux-font))

(if (eq system-type 'darwin)
    (progn (defvar ev/default-font ev/editor-font)
           (defvar ev/variable-pitch-font "SF Pro Text"))
  (progn (defvar ev/default-font ev/editor-font)
         (defvar ev/variable-pitch-font "Iosevka Comfy Motion Duo")))

(defun ev/setup-linux-font-heights ()
  (if (getenv "WSL_DISTRO_NAME")
      (setq ev/variable-pitch-font-height 170
            ev/editor-font-height 170
            ev/fixed-pitch-font-height 170)
    (setq ev/variable-pitch-font-height 110
          ev/editor-font-height 110
          ev/fixed-pitch-font-height 110)))

(if (eq system-type 'darwin)
    (setq ev/variable-pitch-font-height 140
          ev/editor-font-height 130
          ev/fixed-pitch-font-height 130)
  (ev/setup-linux-font-heights))

(set-face-attribute 'default nil
                    :family ev/editor-font
                    :height ev/editor-font-height)
(set-face-attribute 'fixed-pitch nil
                    :family ev/editor-font
                    :height ev/fixed-pitch-font-height)
(set-face-attribute 'variable-pitch nil
                    :family ev/variable-pitch-font
                    :height ev/variable-pitch-font-height)
;; (set-face-attribute 'italic nil :slant 'italic :underline nil)

(defun ev/big-font-size ()
  (interactive)
  (set-face-attribute 'default nil
                      :family ev/editor-font
                      :height (+ ev/editor-font-height 30))
  (set-face-attribute 'fixed-pitch nil
                      :family ev/editor-font
                      :height (+ ev/fixed-pitch-font-height 30))
  (set-face-attribute 'variable-pitch nil
                      :family ev/variable-pitch-font
                      :height (+ ev/variable-pitch-font-height 30)))

(defun ev/increase-font-size ()
  (interactive)
  (set-face-attribute 'default nil
                      :height
                      (ceiling (* 1.1
                                  (face-attribute 'default :height))))
  (set-face-attribute 'fixed-pitch nil
                      :height
                      (ceiling (* 1.1
                                  (face-attribute 'fixed-pitch :height))))
  (set-face-attribute 'variable-pitch nil
                      :height
                      (ceiling (* 1.1
                                  (face-attribute 'variable-pitch :height)))))

(defun ev/decrease-font-size ()
  (interactive)
  (set-face-attribute 'default nil
                      :height
                      (max 1
                           (floor (* 0.9
                                     (face-attribute 'default :height)))))
  (set-face-attribute 'fixed-pitch nil
                      :height
                      (max 1
                           (floor (* 0.9
                                     (face-attribute 'fixed-pitch :height)))))
  (set-face-attribute 'variable-pitch nil
                      :height
                      (max 1
                           (floor (* 0.9
                                     (face-attribute 'variable-pitch :height))))))

(defun ev/reset-font-size ()
  (interactive)
  (set-face-attribute 'default nil
                      :height ev/editor-font-height)
  (set-face-attribute 'fixed-pitch nil
                      :height ev/fixed-pitch-font-height)
  (set-face-attribute 'variable-pitch nil
                      :height ev/variable-pitch-font-height))

(custom-theme-set-faces
 'user
 `(org-code ((t (:inherit fixed-pitch :family ,ev/editor-font))))
 `(org-block ((t (:inherit fixed-pitch :family ,ev/editor-font))))
 `(org-block-begin-line ((t (:inherit (shadow fixed-pitch) :family ,ev/editor-font :extend t))))
 `(org-block-end-line ((t (:inherit org-block-begin-line))))
 `(org-verbatim ((t (:inherit fixed-pitch :family ,ev/editor-font))))
 `(outline-1 ((t (:height 1.5))))
 `(outline-2 ((t (:height 1.4))))
 `(outline-3 ((t (:height 1.3))))
 `(outline-4 ((t (:height 1.2))))
 `(outline-5 ((t (:height 1.1))))
 `(outline-6 ((t (:height 1.0))))
 `(outline-7 ((t (:height 1.0))))
 `(outline-8 ((t (:height 1.0))))
 `(markdown-inline-code-face ((t (:inherit org-code))))
 `(markdown-code-face ((t (:inherit fixed-pitch :family ,ev/editor-font))))
 `(org-document-info-keyword ((t (:inherit fixed-pitch))))
 `(org-meta-line ((t :inherit fixed-pitch)))
 `(org-drawer ((t :inherit fixed-pitch))))
 ;; `(org-document-title ((t (:inherit outline-1 :weight bold)))))

(use-package ligature
  :straight
  (ligature :type git :host github :repo "mickeynp/ligature.el")
  :config
  (setq liga '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
               ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
               "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
               "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
               "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
               "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
               "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
               "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
               ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
               "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
               "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
               "\\\\" "://"))
  (ligature-set-ligatures 'prog-mode liga)
  (ligature-set-ligatures 'org-mode liga)
  :general
  (ev/leader-key-map
   "u f l" 'global-ligature-mode))

(defun ev/show-column-guide ()
  (setq display-fill-column-indicator-column 80)
  (display-fill-column-indicator-mode))

(add-hook 'prog-mode-hook #'ev/show-column-guide)

(defun ev/display-set-relative ()
  (interactive)
  (if (not (or (eq major-mode 'org-mode) (eq major-mode 'vterm-mode) (eq major-mode 'markdown-mode) (eq major-mode 'gfm-mode)))
      (setq display-line-numbers 'visual)
    (setq display-line-numbers nil)))

(defun ev/display-set-absolute ()
  (interactive)
  (if (not (or (eq major-mode 'org-mode) (eq major-mode 'vterm-mode) (eq major-mode 'markdown-mode) (eq major-mode 'gfm-mode)))
      (setq display-line-numbers t)
    (setq display-line-numbers nil)))

(defun ev/display-set-hidden ()
  (interactive)
  (setq display-line-numbers nil))

(use-package display-line-numbers
  :custom
  (display-line-numbers-widen t)
  (display-line-numbers-type 'visual)
  ;; :hook
  ;; ((prog-mode conf-mode) . display-line-numbers-mode)
  ;; (evil-insert-state-entry . ev/display-set-absolute)
  ;; (evil-insert-state-exit . ev/display-set-relative)
  :general
  (ev/leader-key-map
   "u l h" 'ev/display-set-hidden
   "u l r" 'ev/display-set-relative
   "u l a" 'ev/display-set-absolute))

(setq show-trailing-whitespace t)

(setq require-final-newline t)

(use-package nerd-icons)

(use-package nerd-icons-dired
  :hook ((dired-mode . nerd-icons-dired-mode)
         ;; prevent icons from overlapping vertically
         (dired-mode . (lambda () (setq line-spacing 0.25)))))

(column-number-mode 1)

(use-package diminish
  :config
  (diminish 'visual-line-mode)
  (diminish 'which-key-mode)
  (diminish 'buffer-face-mode)
  (diminish 'auto-revert-mode)
  (diminish 'eldoc-mode))

(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

(setq display-time-format " %H:%M ")
(setq display-time-interval 60)
(setq display-time-default-load-average nil)

;; Only display current date and time, not email stuff
(setq display-time-string-forms
      '((propertize
         (format-time-string display-time-format now)
         ;; 'face 'display-time-date-and-time
         'help-echo (format-time-string "%a %b %e, %Y" now))
        " "))
(display-time-mode 1)

(use-package spacious-padding
  :config
  (spacious-padding-mode 0))

(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :init
  (nerd-icons-completion-mode))

(use-package marginalia
  :after vertico
  :general
  (:keymaps 'minibuffer-local-map
            "M-a" 'marginalia-cycle)
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

(use-package vertico
  :demand t                             ; Otherwise won't get loaded immediately
  :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive
                                ))
  :general
  (:keymaps '(normal insert visual motion)
            "C-<" #'vertico-repeat ; C-S-,
            )
  (:keymaps 'vertico-map
            "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
            "<escape>" #'minibuffer-keyboard-quit
            "?" #'minibuffer-completion-help
            "C-M-n" #'vertico-next-group
            "C-M-p" #'vertico-previous-group
            ;; Multiform toggles
            "<backspace>" #'vertico-directory-delete-char
            "C-w" #'vertico-directory-delete-word
            "C-<backspace>" #'vertico-directory-delete-word
            "RET" #'vertico-directory-enter
            "C-i" #'vertico-quick-insert
            "C-o" #'vertico-quick-exit
            "M-o" #'kb/vertico-quick-embark
            "M-G" #'vertico-multiform-grid
            "M-F" #'vertico-multiform-flat
            "M-R" #'vertico-multiform-reverse
            "M-U" #'vertico-multiform-unobtrusive
            "C-l" #'kb/vertico-multiform-flat-toggle
            )
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
         (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
         )
  :custom
  (vertico-count 13)
  (vertico-resize t)
  (vertico-cycle nil)
  ;; Extensions
  (vertico-grid-separator "       ")
  (vertico-grid-lookahead 50)
  (vertico-buffer-display-action '(display-buffer-reuse-window))
  (vertico-multiform-categories
   '((file reverse)
     (consult-grep buffer)
     (consult-location)
     (imenu buffer)
     (library reverse indexed)
     (org-roam-node reverse indexed)
     (t reverse)
     ))
  (vertico-multiform-commands
   '(("flyspell-correct-*" grid reverse)
     (org-refile grid reverse indexed)
     (consult-yank-pop indexed)
     (consult-flycheck)
     (consult-lsp-diagnostics)
     ))
  :init
  (defun kb/vertico-multiform-flat-toggle ()
    "Toggle between flat and reverse."
    (interactive)
    (vertico-multiform--display-toggle 'vertico-flat-mode)
    (if vertico-flat-mode
        (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
      (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
  (defun kb/vertico-quick-embark (&optional arg)
    "Embark on candidate using quick keys."
    (interactive)
    (when (vertico-quick-jump)
      (embark-act arg)))

  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun kb/basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun kb/basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
  :config
  (vertico-mode)
  ;; Extensions
  (vertico-multiform-mode)

  ;; Prefix the current candidate with “» ”. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "» " 'face 'vertico-current)
                   "  ")
                 cand))))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)    ; I want to be in control!
  (completion-category-overrides
   '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                   orderless
                   ))
     ))

  (orderless-component-separator 'orderless-escapable-split-on-space)
  (orderless-matching-styles
   '(orderless-literal
     orderless-prefixes
     orderless-initialism
     orderless-regexp
     ;; orderless-flex
     ;; orderless-strict-leading-initialism
     ;; orderless-strict-initialism
     ;; orderless-strict-full-initialism
     ;; orderless-without-literal          ; Recommended for dispatches instead
     ))
  (orderless-style-dispatchers
   '(prot-orderless-literal-dispatcher
     prot-orderless-strict-initialism-dispatcher
     prot-orderless-flex-dispatcher
     ))
  :init
  (defun orderless--strict-*-initialism (component &optional anchored)
    "Match a COMPONENT as a strict initialism, optionally ANCHORED.
The characters in COMPONENT must occur in the candidate in that
order at the beginning of subsequent words comprised of letters.
Only non-letters can be in between the words that start with the
initials.

If ANCHORED is `start' require that the first initial appear in
the first word of the candidate.  If ANCHORED is `both' require
that the first and last initials appear in the first and last
words of the candidate, respectively."
    (orderless--separated-by
        '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
      (cl-loop for char across component collect `(seq word-start ,char))
      (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
      (when (eq anchored 'both)
        '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

  (defun orderless-strict-initialism (component)
    "Match a COMPONENT as a strict initialism.
This means the characters in COMPONENT must occur in the
candidate in that order at the beginning of subsequent words
comprised of letters.  Only non-letters can be in between the
words that start with the initials."
    (orderless--strict-*-initialism component))

  (defun prot-orderless-literal-dispatcher (pattern _index _total)
    "Literal style dispatcher using the equals sign as a suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
    "Leading initialism  dispatcher using the comma suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "," pattern)
      `(orderless-strict-initialism . ,(substring pattern 0 -1))))

  (defun prot-orderless-flex-dispatcher (pattern _index _total)
    "Flex  dispatcher using the tilde suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "." pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))
  )

(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 3)

  ;; (corfu-separator ?\s)          ;; (M-SPC) Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match 'separator)
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Keybindings
  (global-set-key (kbd "M-n") #'corfu-next)
  (global-set-key (kbd "M-p") #'corfu-previous)
  (global-set-key (kbd "C-M-i") #'corfu-complete)

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  (setq tab-always-indent 'complete))

;; Add extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  ;; NOTE: The order matters!
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-use-icons t)
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  (kind-icon-blend-frac 0.08)
  (kind-icon-default-style
   '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 0.5 :scale 1.0))
  (kind-icon-formatted 'variable)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package yasnippet
  :init
  (setq yas-snippet-dirs
        `(,(concat user-emacs-directory (file-name-as-directory "snippets"))))
  :hook
  ;; still have to manually activate the mode for some reason...
  (snippet-mode . (lambda () (set (make-local-variable 'require-final-newline) nil)))
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :after yasnippet
  :ensure t)

(use-package yasnippet-capf
  :after cape
  :config
  (add-to-list 'completion-at-point-functions #'yasnippet-capf))

(use-package eglot)

(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))

(setq treesit-language-source-alist
      '((bash "https://github.com/tree-sitter/tree-sitter-bash")
        (cmake "https://github.com/uyha/tree-sitter-cmake")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (lua "https://github.com/MunifTanjim/tree-sitter-lua")
        (make "https://github.com/alemuller/tree-sitter-make")
        (markdown "https://github.com/ikatyang/tree-sitter-markdown")
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (toml "https://github.com/tree-sitter/tree-sitter-toml")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
        (yaml "https://github.com/ikatyang/tree-sitter-yaml")
        (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml" "master" "ocaml/src")
        (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
        (rust "https://github.com/tree-sitter/tree-sitter-rust")
        (c "https://github.com/tree-sitter/tree-sitter-c")
        (cpp "https://github.com/tree-sitter/tree-sitter-cpp/" "master" "src")
        (vue "https://github.com/ikatyang/tree-sitter-vue")))

(setq major-mode-remap-alist
      '((bash-mode . bash-ts-mode)
        (cmake-mode . cmake-ts-mode)
        (css-mode . css-ts-mode)
        (elisp-mode . elisp-ts-mode)
        (go-mode . go-ts-mode)
        (html-mode . html-ts-mode)
        (javascript-mode . js-ts-mode)
        (json-mode . json-ts-mode)
        (make-mode . make-ts-mode)
        (python-mode . python-ts-mode)
        (toml-mode . toml-ts-mode)
        (tsx-mode . tsx-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (yaml-mode . yaml-ts-mode)
        (ocaml-mode . ocaml-ts-mode)
        ;; (csharp-mode . csharp-ts-mode)
        (rust-mode . rust-ts-mode)
        (c-mode . c-ts-mode)
        (c++-mode . c++-ts-mode)
        (lua-mode . lua-ts-mode)))

(add-to-list 'auto-mode-alist '("\\.pl?\\'" . prolog-mode))

(use-package yaml-mode
  :hook
  (yaml-mode . (lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent))))

(use-package markdown-mode
  :demand t
  :mode ("\\.md\\'" . gfm-mode)
  :init (setq markdown-command "pandoc"
              markdown-header-scaling t
              markdown-enable-math t
              markdown-make-gfm-checkboxes-buttons t
              markdown-fontify-code-blocks-natively t))

(use-package clojure-mode)

(use-package aggressive-indent-mode
  :hook (clojure-mode))

(use-package smartparens
  :init (require 'smartparens-config)
  :hook (clojure-mode . smartparens-mode))

;; Invoke the nREPL with M-x cider-jack when visiting a file inside a clojure
;; project.
(use-package cider
  :ensure t
  :init
  ;; Open a REPL buffer without switching focus to it when Cider is invoked.
  (setq cider-repl-pop-to-buffer-on-connect 'display-only)

  ;; Auto-trim REPL large buffer.
  (setq cider-repl-buffer-size-limit 100000)
  :hook
  ;; Keep prompt on bottom line when output is printed.
  (cider-repl-mode . (lambda ()
                       (setq scroll-conservatively 101))))

(use-package sly
  :init (setq inferior-lisp-program (executable-find "sbcl"))
  :mode ("\\.lisp?\\'" . common-lisp-mode)
  :hook
  (sly-mode . (lambda ()
                (unless (sly-connected-p)
                  (save-excursion (sly))))))

(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . tsx-ts-mode))

(use-package web-mode)

(use-package jq-mode
  :mode ("\\.jq\\'" . jq-mode))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))

;; Below makes sure that restclient-jq can be required which
;; is a must if we want to be able to use jq related tasks.
(use-package restclient-jq
  :after restclient
  :config (require 'restclient-jq))

(use-package vue-ts-mode
  :straight '(vue-ts-mode
              :type git
              :host github
              :repo "8uff3r/vue-ts-mode"
              :branch "main")
  :mode ("\\.vue\\'" . vue-ts-mode)
  :config
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(vue-ts-mode . ("vue-language-server" "--stdio"
                                  :initializationOptions
                                  (:typescript (:tsdk "./node_modules/typescript/lib"))))))
  :hook (vue-ts-mode . eglot-ensure))

(add-to-list 'auto-mode-alist '("\\.rs?\\'" . rust-ts-mode))

(use-package mermaid-mode :mode "\\.mmd$")

(use-package lua-mode
  :mode "\\.lua\\'")

(use-package lua-ts-mode
  :config
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((lua-mode lua-ts-mode) . ("lua-language-server"))))
  (add-to-list 'project-vc-extra-root-markers ".busted")
  :hook
  ((lua-mode . lua-ts-mode)
   (lua-ts-mode . eglot-ensure)))

;; Invoke Eglot when entering a C# file
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '((csharp-mode csharp-ts-mode) . ("omnisharp" "-lsp"))))
(add-hook 'csharp-mode-hook 'eglot-ensure)

;; C# is fairly verbose, so lines are usually longer than 80 columns
(add-hook 'csharp-mode-hook
          (lambda () (when (not (= display-fill-column-indicator-column 120))
                       (setq display-fill-column-indicator-column 120))))

;; OCaml configuration
;;  - better error and backtrace matching

(defun set-ocaml-error-regexp ()
  (set
   'compilation-error-regexp-alist
   (list '("[Ff]ile \\(\"\\(.*?\\)\", line \\(-?[0-9]+\\)\\(, characters \\(-?[0-9]+\\)-\\([0-9]+\\)\\)?\\)\\(:\n\\(\\(Warning .*?\\)\\|\\(Error\\)\\):\\)?"
           2 3 (5 . 6) (9 . 11) 1 (8 compilation-message-face)))))

(add-hook 'tuareg-mode-hook 'set-ocaml-error-regexp)
(add-hook 'caml-mode-hook 'set-ocaml-error-regexp)

(use-package flycheck
  :init (global-flycheck-mode))

(use-package magit
  :config
  ;; Make Magit the only window in the frame when invoked.
  (setq magit-display-buffer-function
        #'magit-display-buffer-fullframe-status-v1)
  ;; Restore previous layout when exiting Magit.
  (setq magit-bury-buffer-function
        #'magit-restore-window-configuration)
  :general
  (ev/leader-key-map
   "g g" 'magit-status))

(use-package diff-hl
  :init
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode) ; update diff-hl on the fly
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode) ; show diff in dired
  :hook
  (magit-pre-refresh . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh))

(use-package eat
  :straight (:type git
                   :host codeberg
                   :repo "akib/emacs-eat"
                   :files ("*.el" ("term" "term/*.el") "*.texi"
                           "*.ti" ("terminfo/e" "terminfo/e/*")
                           ("terminfo/65" "terminfo/65/*")
                           ("integration" "integration/*")
                           (:exclude ".dir-locals.el" "*-tests.el")))
  :general (ev/leader-key-map "t e" 'eshell)
  :custom
  (eat-term-name "xterm-256color")
  (eat-kill-buffer-on-exit t)
  :hook ((eshell-load . eat-eshell-mode)
         (eshell-load . eat-eshell-visual-command-mode)))

(use-package project
  :general
  (ev/leader-key-map
   "p" '(:keymap project-prefix-map :wk "project")) ; leader prefix for built-in project.el
  :straight (:type built-in))

(use-package dired
  :straight (:type built-in)
  :general
  (ev/leader-key-map
   "d d" 'dired
   "d j" '(dired-jump :wk "dired jump"))
  :config
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/opt/homebrew/bin/gls"))
  ;; (evil-define-key 'normal dired-mode-map
  ;;   "h" 'dired-up-directory
  ;;   "l" 'dired-find-file)
  :hook (dired-mode . dired-hide-details-mode)
  :custom
  (dired-listing-switches "-aBhl --group-directories-first"))

(use-package dired-single)

(use-package dired-hide-dotfiles)
;; :config
;; (evil-define-key 'normal dired-mode-map
;; "H" 'dired-hide-dotfiles-mode))

(use-package treemacs
  :defer t
  :general (ev/leader-key-map "f e" 'treemacs))

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-nerd-icons
  :after (treemacs nerd-icons)
  :config (treemacs-load-theme "nerd-icons"))

(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

;; https://karthinks.com/software/jumping-directories-in-eshell/
(defun eshell/z (&optional regexp)
  "Navigate to a previously visited directory in eshell, or to
any directory proferred by `consult-dir'."
  (let ((eshell-dirs (delete-dups
                      (mapcar 'abbreviate-file-name
                              (ring-elements eshell-last-dir-ring)))))
    (cond
     ((and (not regexp) (featurep 'consult-dir))
      (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                 :narrow ?e
                                                 :category file
                                                 :face consult-file
                                                 :items ,eshell-dirs))
             (consult-dir-sources (cons consult-dir--source-eshell
                                        consult-dir-sources)))
        (eshell/cd (substring-no-properties
                    (consult-dir--pick "Switch directory: ")))))
     (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                     (completing-read "cd: " eshell-dirs)))))))

(use-package editorconfig
  :diminish
  :config (editorconfig-mode 1))

;; Example configuration for Consult
(use-package consult
  :general
  (ev/leader-key-map
   "s g" 'consult-git-grep
   "s s" 'consult-ripgrep
   "s l" 'consult-line
   "s L" 'consult-line-multi)

  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )

(use-package org
  :init
  (setq org-directory (expand-file-name "~/Documents/org")
        org-agenda-files `(,org-directory)
        org-default-notes-file (concat org-directory "/inbox.org"))
  (require 'org-indent)
  :custom
  (org-return-follows-link t)
  (org-startup-with-inline-images t)
  (org-fontify-quote-and-verse-blocks nil)
  (org-image-actual-width '(300))
  (org-pretty-entities t)
  (org-auto-align-tags nil)
  (org-tags-column 0)
  (org-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)
  (org-ellipsis "…")
  (org-log-done 'time) ; Will add CLOSED: [timestamp] line after todo headline when marked as done

  (org-capture-templates
   '(("f" "Fleeting note" item
      (file+headline org-default-notes-file "Notes")
      "- %?")
     ("t" "New task" entry
      (file+headline org-default-notes-file "Tasks")
      "* TODO %i%?")))
  :config
  ;; Agenda
  (setq org-refile-targets
        '((org-agenda-files . (:maxlevel . 3))
          (nil . (:maxlevel . 3))))
  (setq org-refile-use-outline-path t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)
  (setq org-reverse-note-order nil)
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :hook
  ((org-mode gfm-mode markdown-mode) . visual-line-mode)
  ((org-mode gfm-mode markdown-mode) . variable-pitch-mode)
  :general (ev/leader-key-map "o b t" 'org-babel-tangle))

(use-package org-modern
  :after org
  :custom
  (org-modern-table nil)
  (org-modern-todo t)
  (org-modern-star '("*"))
  (org-modern-hide-stars nil)
  (org-modern-block-fringe 8)
  :hook
  (org-mode . org-modern-mode))

(use-package olivetti
  :diminish
  :general
  (ev/leader-key-map "u o" 'olivetti-mode)
  :init
  (setq olivetti-body-width 120
        olivetti-minimum-body-width 72)
  :config
  :hook ((org-mode markdown-mode) . olivetti-mode))

(use-package org-appear
  :custom
  (org-hide-emphasis-markers t)
  (org-appear-autoemphasis t)
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  (org-appear-inside-latex t)
  :hook (org-mode . org-appear-mode))

(use-package org-noter
  :custom
  ;; Directory where org-noter will look for note files if invoked in a
  ;; non-org-roam buffer
  (org-noter-notes-search-path '("~/Documents/notes/literature"))

  ;; Create highlight in pdf when creating note
  (org-noter-highlight-selected-text t)

  ;; Remember last read location in document
  (org-noter-auto-save-last-location t))

(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t)

(defconst load-language-alist
  '((emacs-lisp . t)
    (perl       . t)
    (python     . t)
    (ruby       . t)
    (js         . t)
    (css        . t)
    (sass       . t)
    (C          . t)
    (java       . t)
    (shell      . t)
    (plantuml   . t)
    (lua        . t))
  "Alist of org ob languages.")
(org-babel-do-load-languages 'org-babel-load-languages
                             load-language-alist)

(use-package denote
  :demand t
  :init
  (setq denote-directory (expand-file-name "~/Documents/notes/")
        denote-journal-extras-directory (concat denote-directory "/journal"))
  :config
  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have a literal "[D]"
  ;; followed by the file's title.  Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (setq denote-rename-buffer-format "[D] %t")
  (denote-rename-buffer-mode 1)
  (setq denote-journal-extras-title-format nil) ; always prompt for title
  (setq denote-journal-extras-keyword "journal")
  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("n" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t))

    ;; This prompts for TITLE, KEYWORDS, and SUBDIRECTORY
    (add-to-list 'org-capture-templates
                 '("N" "New note with prompts (with denote.el)" plain
                   (file denote-last-path)
                   (function
                    (lambda ()
                      (denote-org-capture-with-prompts :title :keywords :signature)))
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))
  :bind
  (("C-c n n" . denote)
   ("C-c n N" . denote-type)
   ("C-c n d" . denote-date)
   ("C-c n z" . denote-signature) ; "zettelkasten" mnemonic
   ("C-c n s" . denote-subdirectory)
   ("C-c n o" . denote-sort-dired) ; "order" mnemonic
   ("C-c n j" . denote-journal-extras-new-entry)
   ("C-c n J" . denote-journal-extras-new-or-existing-entry)
   ("C-c n r" . denote-rename-file)
   ("C-c n i" . denote-link) ; "insert" mnemonic
   ("C-c n I" . denote-add-links)
   ("C-c n b" . denote-backlinks)
   ("C-c n f f" . denote-find-link)
   ("C-c n f b" . denote-find-backlink)
   ;; Also see `denote-rename-file' further above.
   ("C-c n R" . denote-rename-file-using-front-matter)
   :map dired-mode-map
   ("C-c C-d C-i" . denote-link-dired-marked-notes)
   ("C-c C-d C-r" . denote-dired-rename-marked-files)
   ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
   ("C-c C-d C-f" . denote-dired-rename-marked-files-using-front-matter))
  :hook
  ;; Highlight Denote file names in Dired buffers.  Below is the
  ;; generic approach, which is great if you rename files Denote-style
  ;; in lots of places:
  ((dired-mode . denote-dired-mode)
   ;; If you use Markdown or plain text files you want to buttonise
   ;; existing buttons upon visiting the file (Org renders links as
   ;; buttons right away).
   (find-file . denote-link-buttonize-buffer)))

(use-package denote-explore
  :after denote
  :custom
  ;; Where to store network data and in which format
  (denote-explore-network-directory (concat denote-directory "/graphs/"))
  (denote-explore-network-filename "denote-network")
  ;; Output format
  (denote-explore-network-format 'graphviz)
  (denote-explore-network-graphviz-filetype "svg")
  ;; Exlude keywords or regex
  (denote-explore-network-keywords-ignore '("bib"))
  :bind
  (;; Statistics
   ("C-c n e c" . denote-explore-count-notes)
   ("C-c n e C" . denote-explore-count-keywords)
   ("C-c n e b" . denote-explore-keywords-barchart)
   ("C-c n e x" . denote-explore-extensions-barchart)
   ;; Random walks
   ("C-c n e r" . denote-explore-random-note)
   ("C-c n e l" . denote-explore-random-link)
   ("C-c n e k" . denote-explore-random-keyword)
   ;; Denote Janitor
   ("C-c n e d" . denote-explore-identify-duplicate-notes)
   ("C-c n e z" . denote-explore-zero-keywords)
   ("C-c n e s" . denote-explore-single-keywords)
   ("C-c n e o" . denote-explore-sort-keywords)
   ("C-c n e r" . denote-explore-rename-keywords)
   ;; Visualise denote
   ("C-c n e n" . denote-explore-network)
   ("C-c n e v" . denote-explore-network-regenerate)
   ("C-c n e D" . denote-explore-degree-barchart)))

(use-package consult-notes
  :commands (consult-notes
             consult-notes-search-in-all-notes)
  :custom
  (consult-notes-file-dir-sources
   `(("Notes" ?n ,denote-directory)
     ("Journals" ?j ,denote-journal-extras-directory)
     ("Agenda" ?a ,org-directory)))
  :config
  (when (locate-library "denote")
    (consult-notes-denote-mode))
  :bind
  (("C-c n c" . consult-notes)
   ("C-c n C" . consult-notes-search-in-all-notes)))

(use-package pdf-tools
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf")
  :hook (pdf-view-mode . (lambda () (interactive)
                           (display-line-numbers-mode -1))))

(use-package embark
  :bind
  (("C->" . embark-act)         ;; C-S-.
   ("M-." . embark-dwim)        ;; M-. also is "go-to-definition but embark-dwim does just that in that context
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :general
  (ev/leader-key-map
   "E E" 'embark-act
   "E h B" 'embark-bindings)

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :hook
  ;; (prog-mode . (lambda ()
  ;;                (unless (string-match-p "*temp*" (buffer-name))
  ;;                  (copilot-mode))))
  (emacs-lisp-mode . (lambda ()
                       (setq-local copilot--indent-warning-printed-p t)))
  :config
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion-by-word)
  :general (ev/leader-key-map
            "a c m" 'copilot-mode
            "a c n" 'copilot-next-completion
            "a c p" 'copilot-previous-completion))

(use-package gptel
  :custom
  (gptel-default-mode #'org-mode)
  :config
  (setq-default gptel-model "mistral:latest"
                gptel-backend (gptel-make-ollama "Ollama"
                                :host "localhost:11434"
                                :stream t
                                :models '("mistral:latest")))
  :general
  (ev/leader-key-map
   "a a" 'gptel
   "a g" 'gptel-menu
   "a s" 'gptel-send))

(use-package popper
  :bind (("C-`"   . popper-toggle)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints

(defun ev/insert-timestamp ()
  "Insert timestamp with format [%H:%M] at point."
  (interactive)
  (insert (format-time-string "[%H:%M]")))

(use-package devdocs
  :init
  (defun ev/devdocs-lookup-thing-at-point ()
    "Look up definition of thing at point, using Devdocs."
    (interactive)
    (devdocs-lookup nil (thing-at-point 'symbol t)))
  :hook
  ((js-mode
    . (lambda () (setq-local devdocs-current-docs '("javascript"))))
   (markdown-mode
    . (lambda () (setq-local devdocs-current-docs '("markdown"))))
   ((elisp-mode emacs-lisp-mode)
    . (lambda () (setq-local devdocs-current-docs '("elisp"))))
   (dockerfile-mode
    . (lambda () (setq-local devdocs-current-docs '("docker"))))
   (vue-ts-mode
    . (lambda () (setq-local devdocs-current-docs '("vue~3" "javascript" "typescript")))))
  :general
  (ev/leader-key-map
   "h d l" 'devdocs-lookup
   "h d p" 'devdocs-peruse
   "h d i" 'devdocs-install
   "h d d" 'ev/devdocs-lookup-thing-at-point))

(use-package hl-todo
  :hook ((prog-mode . hl-todo-mode)
         (conf-mode . hl-todo-mode)
         (org-mode . hl-todo-mode))

  :custom
  (hl-todo-highlight-punctuation ":")
  (hl-todo-keyword-faces
   '(("TODO" warning bold)
     ("FIXME" error bold)
     ("REVIEW" font-lock-keyword-face bold)
     ("HACK" font-lock-constant-face bold)
     ("DEPRECATED" font-lock-doc-face bold)
     ("NOTE" shr-code bold)
     ;; ("INFO" font-lock-keyword-face bold)
     ("BUG" error bold))))

(use-package transpose-frame)
