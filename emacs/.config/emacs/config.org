:DOC-CONFIG:
#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+PROPERTY: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programming source file located at
  ;; https://github.com/emilknievel/dotfiles/blob/main/emacs/.config/emacs/config.org
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: Emacs Config
#+author: Emil VÃ¥gstedt
#+email: emil.vagstedt@icloud.com

** Package Management
*** straight.el
Use develop branch for compatibility
#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")
#+end_src

Bootstrap straight.el
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

** Better defaults
https://git.sr.ht/~technomancy/better-defaults
#+begin_src emacs-lisp
  (unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
    (ido-mode t)
    (setq ido-enable-flex-matching t))

  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; https://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (savehist-mode 1)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        backup-by-copying t
        frame-inhibit-implied-resize t
        ediff-window-setup-function 'ediff-setup-windows-plain
        custom-file (expand-file-name "custom.el" user-emacs-directory))

  (unless backup-directory-alist
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+end_src

** Security
Integrate Emacs with GnuTLS to ensure trusted connections.
#+begin_src emacs-lisp
  (use-package gnutls
    :defer t
    :custom
    (gnutls-verify-error t))
#+end_src

** Key bindings
*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))
#+end_src

*** Evil
Use Evil mode for Vim like bindings.
#+begin_src emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-set-leader '(normal visual) (kbd "SPC"))
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t) ; enable evil in the minibuffer
    :config
    (evil-collection-init))
#+end_src

*** general.el (WIP)
general.el provides a more convenient, unified interface for binding keys in Emacs.
Check [[https://github.com/noctuid/general.el#reading-recommendations][this section]] in the repo for recommended reading before configuring with general.el.
#+begin_src emacs-lisp
#+end_src

** Customization
*** Disable startup screen
Get rid of the annoying startup screen.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Confirm on exit
#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'yes-or-no-p)
#+end_src

*** Theme
**** Kaolin.
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :config
    (setq kaolin-themes-distinct-fringe t)
    (setq kaolin-themes-hl-line-colored t))
#+end_src

**** Catppuccin
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin t))
#+end_src

**** Set theme based on OS.
Toggle dark/light theme on OS appearance change.
#+begin_src emacs-lisp
  ;; Change dark/light theme on OS appearance change.
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ;; TODO: Make this work based on theme instead.
      ('light (setq catppuccin-flavor 'latte))
      ('dark (setq catppuccin-flavor 'frappe)))
    (catppuccin-reload))
      ;;('light (load-theme 'kaolin-light t))
      ;;('dark (load-theme 'kaolin-dark t))))
  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

*** Titlebar
We want the titlebar to match the theme background color.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+end_src

*** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font 15"))

  ;; Render fonts like in iTerm
  ;; Still need to set `defaults write org.gnu.Emacs AppleFontSmoothing -int`
  ;; in the terminal for it to work like intended.
  (setq ns-use-thin-smoothing t)
#+end_src

*** Column indication
Show column indicator at column 80.
#+begin_src emacs-lisp
  (setq fill-column 80)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

Display in the modeline what column the caret is currently at.
#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src

*** Display line numbers
Hooks for relative and absolute line numbers.
#+begin_src emacs-lisp
  (defun my/display-set-relative ()
    (setq display-line-numbers 'visual))

  (defun my/display-set-absolute ()
    (setq display-line-numbers t))
#+end_src

Turn on line numbers for program and configuration modes.
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-widen t)
    (display-line-numbers-type 'visual)
    :hook
    ((prog-mode conf-mode) . display-line-numbers-mode)
    :config
    (add-hook 'evil-insert-state-entry-hook #'my/display-set-absolute)
    (add-hook 'evil-insert-state-exit-hook #'my/display-set-relative))

#+end_src

*** Whitespace
Show trailing whitespace in buffer.
#+begin_src emacs-lisp
  (setq show-trailing-whitespace t)
#+end_src

Add a newline to the end of the file if one doesn't already exist. 
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

*** Treesitter
Use automatic installation, usage and fallback for tree-sitter major modes.
#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

** Completion
*** Corfu
#+begin_src emacs-lisp
  ;;(use-package corfu
  ;;  :general
  ;;  (:keymaps 'corfu-map
  ;;   :states 'insert
  ;;   "C-n" #'corfu-next
  ;;   "C-p" #'corfu-previous
  ;;   "<escape>" #'corfu-quit
  ;;   "<return>" #'corfu-insert
  ;;   "M-d" #'corfu-show-documentation ; rebind to <leader>-d
  ;;   "M-l" #'corfu-show-location)     ; rebind to <leader>-l
  ;;  :config
  ;;  (corfu-global-mode))
#+end_src

** Language configuration
*** Prolog
Use prolog-mode instead of perl-mode for .pl files.
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl?\\'" . prolog-mode))
#+end_src

** Git
*** Magit
Do git stuff in emacs!
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
