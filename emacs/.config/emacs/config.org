:DOC-CONFIG:
#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+PROPERTY: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programming source file located at
  ;; https://github.com/emilknievel/dotfiles/blob/main/emacs/.config/emacs/config.org
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: Emacs Config
#+author: Emil VÃ¥gstedt
#+email: emil.vagstedt@icloud.com

** Package Management
*** straight.el
Use develop branch for compatibility
#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")
#+end_src

Bootstrap straight.el
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

** Better defaults
https://git.sr.ht/~technomancy/better-defaults
#+begin_src emacs-lisp
  (unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
    (ido-mode t)
    (setq ido-enable-flex-matching t))

  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; https://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (savehist-mode 1)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        ; visible-bell t
        load-prefer-newer t
        backup-by-copying t
        frame-inhibit-implied-resize t
        ediff-window-setup-function 'ediff-setup-windows-plain
        custom-file (expand-file-name "custom.el" user-emacs-directory))

  (unless backup-directory-alist
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+end_src

** Security
Integrate Emacs with GnuTLS to ensure trusted connections.
#+begin_src emacs-lisp
  (use-package gnutls
    :defer t
    :custom
    (gnutls-verify-error t))
#+end_src

** Key bindings
*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))
#+end_src

*** Evil
Use Evil mode for Vim like bindings.
#+begin_src emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-C-u-scroll t)
    ;; :config
    ;; (evil-set-leader '(normal visual) (kbd "SPC"))
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t) ; enable evil in the minibuffer
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :hook (prog-mode . evil-commentary-mode))
#+end_src

*** general.el
general.el provides a more convenient, unified interface for binding keys in Emacs.
Check [[https://github.com/noctuid/general.el#reading-recommendations][this section]] in the repo for recommended reading before configuring with general.el.
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-define-key
     :keymaps '(normal insert emacs)
     :prefix "SPC"
     :non-normal-prefix "M-SPC"
     :prefix-map 'my/leader-key-map))
#+end_src

** Customization
*** Disable startup screen
Get rid of the annoying startup screen.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Confirm on exit
#+begin_src emacs-lisp
  (setopt confirm-kill-emacs 'yes-or-no-p)
#+end_src

*** Theme
**** Kaolin.
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :config
    (setq kaolin-themes-distinct-fringe t)
    (setq kaolin-themes-hl-line-colored t))
#+end_src

**** Catppuccin
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin t)
    (setq catppuccin-flavor 'frappe)
    (catppuccin-reload))
#+end_src

**** Set theme based on OS.
Toggle dark/light theme on OS appearance change.
#+begin_src emacs-lisp
  ;; Change dark/light theme on OS appearance change.
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (setq catppuccin-flavor 'latte))
      ('dark (setq catppuccin-flavor 'frappe)))
    (catppuccin-reload))
      ;;('light (load-theme 'kaolin-light t))
      ;;('dark (load-theme 'kaolin-dark t))))

  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

*** Titlebar
We want the titlebar to match the theme background color.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+end_src

*** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font 14"))

  ;; Render fonts like in iTerm
  ;; Still need to set `defaults write org.gnu.Emacs AppleFontSmoothing -int`
  ;; in the terminal for it to work like intended.
  (setq ns-use-thin-smoothing t)
#+end_src

*** Column indication
Show column indicator at column 80.
#+begin_src emacs-lisp
  (defun my/show-column-guide ()
    (setq display-fill-column-indicator-column 80)
    (display-fill-column-indicator-mode))

  (add-hook 'prog-mode-hook #'my/show-column-guide)
#+end_src

Display in the modeline what column the caret is currently at.
#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src

*** Display line numbers
Hooks for relative and absolute line numbers.
#+begin_src emacs-lisp
  (defun my/display-set-relative ()
    (interactive)
    (setq display-line-numbers 'visual))

  (defun my/display-set-absolute ()
    (interactive)
    (setq display-line-numbers t))

  (defun my/display-set-hidden ()
    (interactive)
    (setq display-line-numbers nil))
#+end_src

Turn on line numbers for program and configuration modes.
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-widen t)
    (display-line-numbers-type 'visual)
    :hook
    ((prog-mode conf-mode) . display-line-numbers-mode)
    :config
    (add-hook 'evil-insert-state-entry-hook #'my/display-set-absolute)
    (add-hook 'evil-insert-state-exit-hook #'my/display-set-relative)
    :general
    (my/leader-key-map
      "n h" 'my/display-set-hidden
      "n r" 'my/display-set-relative
      "n a" 'my/display-set-absolute))
#+end_src

*** Whitespace
Show trailing whitespace in buffer.
#+begin_src emacs-lisp
  (setq show-trailing-whitespace t)
#+end_src

Add a newline to the end of the file if one doesn't already exist. 
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

*** Treesitter
Use automatic installation, usage and fallback for tree-sitter major modes.
#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

*** Icons
Install the icons with ~M-x nerd-icons-install-fonts~.
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

Nerd icons for dired.
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook ((dired-mode . nerd-icons-dired-mode)
           ;; prevent icons from overlapping vertically
           (dired-mode . (lambda () (setq line-spacing 0.25)))))
#+end_src

*** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src

** Completion
*** Nerd Icons Completion
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after (marginalia nerd-icons)
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :init
    (nerd-icons-completion-mode))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :general
    (:keymaps 'minibuffer-local-map
      "M-A" 'marginalia-cycle)
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode)) 
#+end_src

*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
  :demand t                             ; Otherwise won't get loaded immediately
  :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive
                                ))
  :general
  (:keymaps '(normal insert visual motion)
   "M-." #'vertico-repeat
   )
  (:keymaps 'vertico-map
   "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
   "<escape>" #'minibuffer-keyboard-quit
   "?" #'minibuffer-completion-help
   "C-M-n" #'vertico-next-group
   "C-M-p" #'vertico-previous-group
   ;; Multiform toggles
   "<backspace>" #'vertico-directory-delete-char
   "C-w" #'vertico-directory-delete-word
   "C-<backspace>" #'vertico-directory-delete-word
   "RET" #'vertico-directory-enter
   "C-i" #'vertico-quick-insert
   "C-o" #'vertico-quick-exit
   "M-o" #'kb/vertico-quick-embark
   "M-G" #'vertico-multiform-grid
   "M-F" #'vertico-multiform-flat
   "M-R" #'vertico-multiform-reverse
   "M-U" #'vertico-multiform-unobtrusive
   "C-l" #'kb/vertico-multiform-flat-toggle
   )
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
         (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
         )
  :custom
  (vertico-count 13)
  (vertico-resize t)
  (vertico-cycle nil)
  ;; Extensions
  (vertico-grid-separator "       ")
  (vertico-grid-lookahead 50)
  (vertico-buffer-display-action '(display-buffer-reuse-window))
  (vertico-multiform-categories
   '((file reverse)
     (consult-grep buffer)
     (consult-location)
     (imenu buffer)
     (library reverse indexed)
     (org-roam-node reverse indexed)
     (t reverse)
     ))
  (vertico-multiform-commands
   '(("flyspell-correct-*" grid reverse)
     (org-refile grid reverse indexed)
     (consult-yank-pop indexed)
     (consult-flycheck)
     (consult-lsp-diagnostics)
     ))
  :init
  (defun kb/vertico-multiform-flat-toggle ()
    "Toggle between flat and reverse."
    (interactive)
    (vertico-multiform--display-toggle 'vertico-flat-mode)
    (if vertico-flat-mode
        (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
      (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
  (defun kb/vertico-quick-embark (&optional arg)
    "Embark on candidate using quick keys."
    (interactive)
    (when (vertico-quick-jump)
      (embark-act arg)))

  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun kb/basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun kb/basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
  :config
  (vertico-mode)
  ;; Extensions
  (vertico-multiform-mode)

  ;; Prefix the current candidate with âÂ» â. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
                                          (lambda (orig cand prefix suffix index _start)
                                            (setq cand (funcall orig cand prefix suffix index _start))
                                            (concat
                                             (if (= vertico--index index)
                                                 (propertize "Â» " 'face 'vertico-current)
                                               "  ")
                                             cand)))
  )
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)    ; I want to be in control!
    (completion-category-overrides
     '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
                     orderless
                     ))
       ))

    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-matching-styles
     '(orderless-literal
       orderless-prefixes
       orderless-initialism
       orderless-regexp
       ;; orderless-flex
       ;; orderless-strict-leading-initialism
       ;; orderless-strict-initialism
       ;; orderless-strict-full-initialism
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-style-dispatchers
     '(prot-orderless-literal-dispatcher
       prot-orderless-strict-initialism-dispatcher
       prot-orderless-flex-dispatcher
       ))
    :init
    (defun orderless--strict-*-initialism (component &optional anchored)
      "Match a COMPONENT as a strict initialism, optionally ANCHORED.
  The characters in COMPONENT must occur in the candidate in that
  order at the beginning of subsequent words comprised of letters.
  Only non-letters can be in between the words that start with the
  initials.

  If ANCHORED is `start' require that the first initial appear in
  the first word of the candidate.  If ANCHORED is `both' require
  that the first and last initials appear in the first and last
  words of the candidate, respectively."
      (orderless--separated-by
       '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
       (cl-loop for char across component collect `(seq word-start ,char))
       (when anchored '(seq (group buffer-start) (zero-or-more (not alpha))))
       (when (eq anchored 'both)
         '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

    (defun orderless-strict-initialism (component)
      "Match a COMPONENT as a strict initialism.
  This means the characters in COMPONENT must occur in the
  candidate in that order at the beginning of subsequent words
  comprised of letters.  Only non-letters can be in between the
  words that start with the initials."
      (orderless--strict-*-initialism component))

    (defun prot-orderless-literal-dispatcher (pattern _index _total)
      "Literal style dispatcher using the equals sign as a suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "=" pattern)
        `(orderless-literal . ,(substring pattern 0 -1))))

    (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
      "Leading initialism  dispatcher using the comma suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "," pattern)
        `(orderless-strict-initialism . ,(substring pattern 0 -1))))

    (defun prot-orderless-flex-dispatcher (pattern _index _total)
      "Flex  dispatcher using the tilde suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "." pattern)
        `(orderless-flex . ,(substring pattern 0 -1))))
    )
#+end_src

*** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

** Language configuration
*** Prolog
Use prolog-mode instead of perl-mode for .pl files.
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl?\\'" . prolog-mode))
#+end_src

*** Docker
Docker file mode.
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :config (put 'dockerfile-image-name 'safe-local-variable #'stringp))
#+end_src

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :hook
    (yaml-mode . (lambda ()
                   (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "pandoc"))
#+end_src

*** Clojure
Clojure mode (possibly going to be replaced by clojure-ts-mode sometime in the future.
#+begin_src emacs-lisp
  (use-package clojure-mode)

  (use-package aggressive-indent-mode
    :hook (clojure-mode))

  (use-package smartparens
    :init (require 'smartparens-config)
    :hook (clojure-mode . smartparens-mode))
#+end_src

** Syntax checking
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
** Git
Magit is a must-have.
#+begin_src emacs-lisp
  (use-package magit
    :general
    (my/leader-key-map
      "g s" 'magit-status))
#+end_src

VSCode style git gutters: [[https://ianyepan.github.io/posts/emacs-git-gutter/]]
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook ((prog-mode . git-gutter-mode)
           (org-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** LSP
# #+begin_src emacs-lisp
#   (use-package lsp-mode
#     :init
#     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
#     (setq lsp-keymap-prefix "C-c l")
#     :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
#            (XXX-mode . lsp)
#            ;; if you want which-key integration
#            (lsp-mode . lsp-enable-which-key-integration))
#     :commands lsp)

#   ;; optionally
#   ;; (use-package lsp-ui :commands lsp-ui-mode)
#   ;; if you are helm user
#   ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#   ;; if you are ivy user
#   ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#   ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#   ;; optionally if you want to use debugger
#   ;; (use-package dap-mode)
#   ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
# #+end_src
