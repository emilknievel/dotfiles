:DOC-CONFIG:
#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+PROPERTY: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programming source file located at
  ;; https://github.com/emilknievel/dotfiles/blob/main/emacs/.config/emacs/config.org
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: Emacs Config
#+author: Emil VÃ¥gstedt
#+email: emil.vagstedt@icloud.com

** Package Management

*** straight.el

Use develop branch for compatibility

#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")
#+end_src

Bootstrap straight.el

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

** Better defaults

https://git.sr.ht/~technomancy/better-defaults

#+begin_src emacs-lisp
  (unless (or (fboundp 'helm-mode) (fboundp 'ivy-mode))
    (ido-mode t)
    (setq ido-enable-flex-matching t))

  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; https://www.emacswiki.org/emacs/SavePlace
  (save-place-mode 1)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (savehist-mode 1)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        backup-by-copying t
        frame-inhibit-implied-resize t
        ediff-window-setup-function 'ediff-setup-windows-plain
        custom-file (expand-file-name "custom.el" user-emacs-directory))

  (unless backup-directory-alist
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+end_src

** Disable startup screen

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
** Key bindings

*** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

** Customization
*** Theme
#+begin_src emacs-lisp
  (use-package autothemer)

  ; (use-package rose-pine-emacs
  ;   :straight (:type git :host github :repo "thongpv87/rose-pine-emacs" :branch "master")
  ;   :defer nil
  ;   :config (load-theme 'rose-pine-color t))

  (use-package kaolin-themes)

  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'kaolin-light t))
      ('dark (load-theme 'kaolin-dark t))))

  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)

  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

#+end_src

*** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font 14"))
  ;; Render fonts like in iTerm
  ;; Still need to set
  ;; `defaults write org.gnu.Emacs AppleFontSmoothing -int`
  ;; in the terminal for it to work like intended
  (setq ns-use-thin-smoothing t)
#+end_src
